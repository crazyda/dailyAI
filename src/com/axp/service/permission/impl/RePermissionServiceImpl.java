package com.axp.service.permission.impl;import java.lang.annotation.Annotation;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.List;import org.springframework.stereotype.Service;import org.springframework.web.bind.annotation.RequestMapping;import com.axp.action.permission.permissionAnnotation.IsItem;import com.axp.action.permission.permissionAnnotation.NeedPermission;import com.axp.model.ReItem;import com.axp.model.RePermission;import com.axp.service.permission.RePermissionService;import com.axp.service.system.impl.BaseServiceImpl;import com.axp.util.StringUtil;@Servicepublic class RePermissionServiceImpl extends BaseServiceImpl implements RePermissionService {    @Override    public void scanPermissionOrItemAnnotation(List<Class<?>> clazzes) throws Exception {        //先找到所有的标签，并拼凑出RePermission对象；        List<RePermission> allPermissions = new ArrayList<>();//保存所有扫描到的权限标签；        List<ReItem> allItems = new ArrayList<>();//保存所有扫描到的菜单标签；        for (Class<?> eachClass : clazzes) {//遍历所有的类；            Method[] methods = eachClass.getDeclaredMethods();            for (Method eachMethod : methods) {//遍历类中的所有方法；                Annotation[] annotations = eachMethod.getDeclaredAnnotations();                for (Annotation eachAnnotation : annotations) {//遍历方法上的所有标签；                    //如果是NeedPermission标签；                    if (eachAnnotation instanceof NeedPermission) {                        RePermission permission = new RePermission();                        RePermission parentPermission = new RePermission();                        permission.setName(((NeedPermission) eachAnnotation).permissionName());                        parentPermission.setName(((NeedPermission) eachAnnotation).classifyName());                        permission.setParentPermission(parentPermission);                        permission.setOrder(eachClass.getName() + "." + eachMethod.getName());                        //拼接链接信息；                        StringBuilder linkAddress = new StringBuilder(20);                        String[] classRequestMappingValue = eachClass.getAnnotation(RequestMapping.class).value();                        String[] methodRequestMappingValue = eachMethod.getAnnotation(RequestMapping.class).value();                        if (methodRequestMappingValue == null || methodRequestMappingValue.length == 0) {                            throw new Exception("NeedPermission标签出现在了错误的地方，此方法上没有RequstMapping标签；");                        }                        if (classRequestMappingValue != null && classRequestMappingValue.length > 0) {                            if (!classRequestMappingValue[0].startsWith("/")) {                                linkAddress.append("/");                            } else {                                linkAddress.append(classRequestMappingValue[0]);                            }                        }                        if (!methodRequestMappingValue[0].startsWith("/")) {                            linkAddress.append("/");                        }                        linkAddress.append(methodRequestMappingValue[0]);                        permission.setLinkAddress(linkAddress.toString());                        permission.setIntro(eachClass.getName() + "类的" + eachMethod.getName() + "方法；");                        allPermissions.add(permission);                    }                    //如果是IsItem标签；                    else if (eachAnnotation instanceof IsItem) {                        String firstItemName = ((IsItem) eachAnnotation).firstItemName();                        String secondItemName = ((IsItem) eachAnnotation).secondItemName();                        String linkName = ((IsItem) eachAnnotation).linkName();                        //获取标签中的菜单信息；                        ReItem item = new ReItem();                        item.setName(secondItemName);                        item.setParentName(firstItemName);                        if (StringUtil.hasLength(linkName)) {//如果用户自定了链接地址，那么就以用户自定义的链接地址为准；                            item.setLinkAddress(linkName);                        } else {//如果没有自定义链接地址，就从类和方法上寻找RequestMapping标签，从中获取链接信息；                            String[] methodAnnotationValue = eachMethod.getAnnotation(RequestMapping.class).value();                            String[] classAnnotationValue = eachClass.getAnnotation(RequestMapping.class).value();                            if (methodAnnotationValue == null || methodAnnotationValue.length == 0) {                                throw new Exception("IsItem所在在方法上要么有RequestMapping标签，要么标签的linkName值不为空；");                            }                            StringBuilder sb = new StringBuilder(30);                            if (StringUtil.hasLength(classAnnotationValue[0])) {                                sb.append(classAnnotationValue[0].startsWith("/") ? classAnnotationValue[0] : ("/" + classAnnotationValue[0]));                            }                            sb.append(methodAnnotationValue[0].startsWith("/") ? methodAnnotationValue[0] : ("/" + methodAnnotationValue[0]));                            item.setLinkAddress(sb.toString());                        }                        allItems.add(item);                    }                }            }        }        //从数据库中获取所有的权限，和这个进行比对增加新增的，不删除旧有的；        List<RePermission> allPermissionInDatabase = rePermissionDAO.findAll();        ScanPermission:        for (RePermission eachScanPermission : allPermissions) {            //遍历查看是否有匹配对象；顺带查看是否有匹配的父类；            RePermission parentPermission = null;            for (RePermission eachPermissionInDatabase : allPermissionInDatabase) {                if (StringUtil.isEmpty(eachPermissionInDatabase.getOrder())) {                    if (parentPermission == null && eachPermissionInDatabase.getName().equals(eachScanPermission.getParentPermission().getName())) {                        parentPermission = eachPermissionInDatabase;                    }                    continue;                }                if (eachPermissionInDatabase.getOrder().equals(eachScanPermission.getOrder())) {//数据库中已有此权限，但是已有的权限名称需要以新权限名称为准；                    eachPermissionInDatabase.setName(eachScanPermission.getName());                    continue ScanPermission;                }            }            //如果能执行此处的代码，表示数据库中没有此权限；            if (parentPermission == null) {//数据中没有权限的分类，那么就创建一个；                parentPermission = new RePermission();                parentPermission.setName(eachScanPermission.getParentPermission().getName());                rePermissionDAO.save(parentPermission);                allPermissionInDatabase.add(parentPermission);//将新建的权限分类，在放回到allPermissionInDatabase集合中；            }            //保存这个数据库中没有的权限；            eachScanPermission.setParentPermission(parentPermission);            rePermissionDAO.save(eachScanPermission);        }        //从数据库中获取所有菜单，并和扫描到的菜单进行比对，添加新的菜单；        List<ReItem> allItemInDatabase = reItemDAO.getAllItems();        ScanItem:        for (ReItem eachItemOfScan : allItems) {            for (ReItem eachItemOfDatabase : allItemInDatabase) {                if (eachItemOfDatabase.getLinkAddress().equals(eachItemOfScan.getLinkAddress())) {//如果是链接地址相同，那么有可能是更改名称或分类，则此处直接更改；                    eachItemOfDatabase.setName(eachItemOfScan.getName());                    eachItemOfDatabase.setParentName(eachItemOfScan.getParentName());                    continue ScanItem;                }            }            //如果执行到此处代码，说明该菜单项是数据库中没有，则添加到数据库；            reItemDAO.save(eachItemOfScan);        }    }}