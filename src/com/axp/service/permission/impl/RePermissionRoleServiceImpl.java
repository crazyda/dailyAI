package com.axp.service.permission.impl;import java.util.ArrayList;import java.util.Collections;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import java.util.Set;import javax.servlet.http.HttpServletRequest;import org.springframework.stereotype.Service;import com.axp.model.AdminUser;import com.axp.model.ReItem;import com.axp.model.RePermission;import com.axp.model.RePermissionRole;import com.axp.query.PageResult;import com.axp.service.permission.RePermissionRoleService;import com.axp.service.system.impl.BaseServiceImpl;import com.axp.util.StringUtil;@Servicepublic class RePermissionRoleServiceImpl extends BaseServiceImpl implements RePermissionRoleService {    @Override    public PageResult<RePermissionRole> getRoleList(Integer adminUserId, Integer currentPage, Integer pageSize, String permissionName) {        return rePermissionRoleDAO.getRoleList(adminUserId, currentPage, pageSize, permissionName);    }    @Override    public RePermissionRole get(Integer id) {        return rePermissionRoleDAO.findById(id);    }    @Override    public void putPermissionAndItemToSession(HttpServletRequest request) throws Exception {        Integer adminUserId = (Integer) request.getSession().getAttribute("currentUserId");        if (adminUserId != null && request.getSession().getAttribute("ReItems_of_loginin_in_Session") == null) {            AdminUser adminUser = adminUserDAO.findById(adminUserId);            //如果当前用户是超级管理员,那么就不用放入权限了；但是菜单需要全部放入session中；            if (adminUser.getLevel() != null && adminUser.getLevel() == StringUtil.SUPERADMIN) {                List<ReItem> itemList = reItemDAO.getAllItems();                Map<String, List<ReItem>> map = new HashMap<>();                for (ReItem eachItem : itemList) {                    List<ReItem> items = map.get(eachItem.getParentName());                    if (items == null) {                        map.put(eachItem.getParentName(), new ArrayList<ReItem>());                    }                }                for (ReItem eachItem : itemList) {                    List<ReItem> items = map.get(eachItem.getParentName());                    items.add(eachItem);                }                //对菜单进行排序,保证前台每次显示的顺序；                Set<Map.Entry<String, List<ReItem>>> entries = map.entrySet();                for (Map.Entry<String, List<ReItem>> each : entries) {                    Collections.sort(each.getValue());                }                request.getSession().setAttribute("ReItems_of_loginin_in_Session", map);                return;            }            //如果没有角色id，说明是之前创建的用户，那么就根据用户的等级（level）给其分配默认的角色；            Integer roleId = getRoleId(adminUser);            //如果有角色，就将角色中包含的权限和菜单放到session中；            RePermissionRole role = rePermissionRoleDAO.findById(roleId);            //将权限放到session中；            Set<RePermission> permissionSet = role.getPermissionSet();            List<RePermission> permissions = new ArrayList<>();            for (RePermission eachPermission : permissionSet) {                if (StringUtil.hasLength(eachPermission.getOrder())) {                    permissions.add(eachPermission);                }            }            request.getSession().setAttribute("RePermissions_in_Session", permissions);            //将菜单放到session中；            Set<ReItem> itemSet = role.getItemSet();            Map<String, List<ReItem>> map = new HashMap<>();            for (ReItem eachItem : itemSet) {                List<ReItem> items = map.get(eachItem.getParentName());                if (items == null) {                    map.put(eachItem.getParentName(), new ArrayList<ReItem>());                }            }            for (ReItem eachItem : itemSet) {                List<ReItem> items = map.get(eachItem.getParentName());                items.add(eachItem);            }            //对菜单进行排序,保证前台每次显示的顺序；            Set<Map.Entry<String, List<ReItem>>> entries = map.entrySet();            for (Map.Entry<String, List<ReItem>> each : entries) {                Collections.sort(each.getValue());            }            request.getSession().setAttribute("ReItems_of_loginin_in_Session", map);            //最后将所有的权限放到session中，因为有些请求用户没有，但是是不需要权限的；            if (request.getServletContext().getAttribute("AllPermission_in_Session") == null) {                List<RePermission> allPermissions = rePermissionDAO.getAllPermissionsOfNeed();                request.getServletContext().setAttribute("AllPermission_in_Session", allPermissions);            }        }    }    @Override    public Map<String, List<RePermission>> getClassifyPermission(AdminUser adminUser) throws Exception {        //用户拥有的所有权限；        List<RePermission> allPsermission = new ArrayList<>();        //如果是超级管理员；        if (adminUser.getLevel() == StringUtil.SUPERADMIN) {            List<RePermission> all = rePermissionDAO.findAll();            for (RePermission each : all) {                if (each.getIsValid()) {                    allPsermission.add(each);                }            }        }        //如果不是超级管理员；        else {            Integer roleId = getRoleId(adminUser);            RePermissionRole role = rePermissionRoleDAO.findById(roleId);            for (RePermission each : role.getPermissionSet()) {                allPsermission.add(each);            }        }        //对用户拥有的权限进行分类；        Map<String, List<RePermission>> returnMap = new HashMap<>();        for (RePermission each : allPsermission) {            if (StringUtil.isEmpty(each.getOrder())) {                returnMap.put(each.getName(), new ArrayList<RePermission>());            }        }        for (RePermission each : allPsermission) {            if (StringUtil.hasLength(each.getOrder())) {                returnMap.get(each.getParentPermission().getName()).add(each);            }        }        return returnMap;    }    @Override    public void doSave(Integer roleId, String roleName, List<Integer> rePermissions, List<Integer> reItems, AdminUser adminUser) {        RePermissionRole role;        if (roleId == null) {            role = new RePermissionRole();            rePermissionRoleDAO.save(role);        } else {            role = rePermissionRoleDAO.findById(roleId);        }        Set<RePermission> perSet = rePermissionDAO.getPermissionByIdList(rePermissions);//新定义的权限集合        Set<ReItem> itemSet = reItemDAO.getItemsByIds(reItems);//新定义的菜单集合        if (roleId != null) {            /**             * 当某个角色的某项权限被删除时，那么该角色的所有子角色，以及子角色的子角色的该项权限都需要被删除；             * 如果此项操作出错，那么就放弃操作，直接只修改当前角色的权限，并在后台打印出信息；             */            try {                List<RePermissionRole> roleList = new ArrayList<>();                roleList = this.getAllRoleExtendCurrentRole(role, roleList);//获取当前角色的子角色，以及子角色的子角色，以此类推；                removeDelPermissionAndItem(roleList, role, perSet, itemSet);//剔除操作；            } catch (Exception e) {                System.out.println("权限剔除出错");                e.printStackTrace();            }        }       /* try {            List<AdminUser> roleUser = adminUserDAO.findByRoleId(roleId);            for (AdminUser user : roleUser) {                this.resetChildRole(perSet, itemSet, user, role);            }        } catch (Exception e) {            System.out.println("权限剔除出错");            e.printStackTrace();        }*/        role.setName(roleName);        role.setAdminusers(adminUser);        role.setPermissionSet(perSet);        role.setItemSet(itemSet);    }    /**     * 删除子角色中的权限和菜单；     *     * @param roleList 当前角色的所有的子角色集合；     * @param role     当前角色对象；     * @param perSet   新的权限集合；     * @param itemSet  新的菜单集合；     */    private void removeDelPermissionAndItem(List<RePermissionRole> roleList, RePermissionRole role, Set<RePermission> perSet, Set<ReItem> itemSet) {        List<RePermission> delPerList = new ArrayList<>();// 需要剔除的旧权限        List<ReItem> delItemList = new ArrayList<>();// 需要剔除的旧菜单        for (RePermission per : role.getPermissionSet()) {// 找出被剔除的权限；            if (!perSet.contains(per)) {                delPerList.add(per);            }        }        for (ReItem item : role.getItemSet()) {//找出被剔除的菜单；            if (!itemSet.contains(item)) {                delItemList.add(item);            }        }        //对所有子角色进行操作，删除需要剔除的权限和角色；        for (RePermissionRole eachRole : roleList) {            Set<RePermission> eachRolePermissionSet = eachRole.getPermissionSet();            Iterator<RePermission> permissionIterator = eachRolePermissionSet.iterator();            while (permissionIterator.hasNext()) {                RePermission each = permissionIterator.next();                if (delPerList.contains(each)) {                    //eachRolePermissionSet.remove(each);                    permissionIterator.remove();                }            }            eachRole.setPermissionSet(eachRolePermissionSet);            Set<ReItem> eachRoleItemSet = eachRole.getItemSet();            Iterator<ReItem> itemIterator = eachRoleItemSet.iterator();            while (itemIterator.hasNext()) {                ReItem each = itemIterator.next();                if (delItemList.contains(each)) {                    //eachRoleItemSet.remove(each);                    itemIterator.remove();                }            }            eachRole.setItemSet(eachRoleItemSet);        }    }    /**     * 获取某角色的子角色，以及子角色的子角色，以此类推；     */    private List<RePermissionRole> getAllRoleExtendCurrentRole(RePermissionRole role, List<RePermissionRole> roleList) {        //当前角色被赋予的用户；        List<AdminUser> roleUser = adminUserDAO.findByRoleId(role.getId());        //这些用户创建的角色；        List<RePermissionRole> roleOfUserCreate = new ArrayList<>();        if (roleUser != null && roleUser.size() > 0) {            roleOfUserCreate = rePermissionRoleDAO.getRolesByAdminList(roleUser);        }        //递归操作；        if (roleOfUserCreate.size() > 0) {            roleList.addAll(roleOfUserCreate);//这些角色时给定角色的第一层子角色；            for (RePermissionRole each : roleOfUserCreate) {                roleList = getAllRoleExtendCurrentRole(each, roleList);            }        }        return roleList;    }    @Override    public Boolean doDelete(Integer id) {        Long count = adminUserDAO.getCountByRoleId(id);        if (count > 0) {//如果角色被使用了，就不管；            return false;        } else {//如果没有被删除，那么就删除，然后返回true；            RePermissionRole role = rePermissionRoleDAO.findById(id);            role.setIsValid(false);            return true;        }    }    /**     * 旧有的adminUser用户是没有角色的，那么此时根据他们的level来分配角色给他们；     * 此时要求：角色列表中的1,2,3,4，条必须是分配各对应adminUser对象的角色；     *     * @param adminUser     * @return     */    public static Integer getRoleId(AdminUser adminUser) throws Exception {        Integer roleId = adminUser.getRePermissionRoleId();        if (roleId == null) {            if (adminUser.getLevel() == StringUtil.ADMIN) {//95:总部                roleId = 1;            } else if (adminUser.getLevel() == StringUtil.ADVERCENTER) {//85:运营中心                roleId = 2;            } else if (adminUser.getLevel() == StringUtil.ADVERONE) {//75:城市代理                roleId = 3;            } else if (adminUser.getLevel() == StringUtil.ADVERTWO) {//65:联盟组                roleId = 4;            } else if (adminUser.getLevel() == StringUtil.SUPPLIER) {//60:商家                roleId = 5;            } else if(adminUser.getLevel() == StringUtil.SHOUFEN){ //55 收分用户            	 roleId = 6;            }else {                throw new Exception("该用户没有角色，或者用户等级没有被分配默认角色");            }        }        return roleId;    }    private void resetChildRole(Set<RePermission> preSet, Set<ReItem> itemSet, AdminUser parent, RePermissionRole parentRole) {        List<RePermission> delPreList = new ArrayList<RePermission>();// 需要剔除的旧权限        List<ReItem> delItemList = new ArrayList<ReItem>();// 需要剔除的旧权限        for (RePermission per : parentRole.getPermissionSet()) {// 如果旧权限集合中拥有新集合中没有的权限，则剔除            if (!preSet.contains(per)) {                delPreList.add(per);            }        }        for (ReItem item : parentRole.getItemSet()) {            if (!itemSet.contains(item)) {                delItemList.add(item);            }        }        List<AdminUser> childs = adminUserDAO.getChilds(parent.getId());// 获取所有子用户id        for (AdminUser child : childs) {            if (child.getRePermissionRoleId() != null) {                RePermissionRole role = rePermissionRoleDAO.findById(child.getRePermissionRoleId());                Set<RePermission> childPerSet = role.getPermissionSet();// 新定义的权限集合                Set<ReItem> childItemSet = role.getItemSet();// 新定义的菜单集合                for (RePermission per : delPreList) {                    if (childPerSet.contains(per)) {                        childPerSet.remove(per);                    }                }                for (ReItem item : delItemList) {                    if (childItemSet.contains(item)) {                        childItemSet.remove(item);                    }                }            }        }    }}