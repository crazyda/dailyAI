package com.axp.service.system.impl;import java.sql.Timestamp;import java.util.List;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.stereotype.Service;import com.axp.model.AdminUser;import com.axp.model.AdminUserMessage;import com.axp.model.MessageCenter;import com.axp.service.system.MessageService;import com.axp.util.PageInfo;import com.axp.util.QueryModel;import com.axp.util.StringUtil;import com.axp.util.Utility;import com.push.ImpAppInformation;@Servicepublic class MessageServiceImpl extends BaseServiceImpl implements MessageService {	    @Override    public void list(HttpServletRequest request,HttpServletResponse response) {		int current_user_id = (Integer) request.getSession().getAttribute("currentUserId");		String search_name = request.getParameter("search_name");		AdminUser user = adminUserDAO.findById(current_user_id);		QueryModel model = new QueryModel();		if (user.getLevel() < StringUtil.ADMIN)			model.combPreEquals("adminUser.id", user.getId(), "adminUserId");		if (search_name != null && search_name.length() > 0)			model.combPreLike("title", search_name);		model.combPreEquals("isValid", true);		model.setOrder("createTime desc");		// 查询符合条件的总记录数		int count = dateBaseDao.findCount(MessageCenter.class, model);		// ---------分页----------		String pagestr = request.getParameter("page");		PageInfo pageInfo = new PageInfo();		Utility.setPageInfomation(pageInfo, pagestr, "20", count);		int start = pageInfo.getCurrentPage() * pageInfo.getPageSize();		int end = pageInfo.getPageSize();		StringBuffer pageBuffer = new StringBuffer();		pageBuffer.append("&search_name="+search_name);		pageInfo.setParam(pageBuffer.toString()+"&page=");		request.setAttribute("pageFoot", pageInfo.getCommonDefaultPageFootView());		pageBuffer = null;		// ---------分页----------		List<MessageCenter> messagelist = dateBaseDao.findPageList(MessageCenter.class, model, start, end);		request.setAttribute("messagelist", messagelist);		model = null;    }      //新增    @Override    public String add(Integer id, HttpServletRequest request) {    	MessageCenter message = null;		if (id != null) {			message = messageCenterDAO.findById(id);		}		int current_user_id = (Integer) request.getSession().getAttribute("currentUserId");		AdminUser user = adminUserDAO.findById(current_user_id);		request.setAttribute("message", message);		if (user.getLevel() >= StringUtil.ADMIN && message != null && message.getCheckStatus() == 1) {			return "ueditor";		} else if (user.getLevel() >= StringUtil.ADMIN && message == null) {			return "ueditor";		} else {			QueryModel mode = new QueryModel();			mode.combPreEquals("isvalid", true);			mode.combPreEquals("parentId", user.getId());			List<AdminUser> unionList = dateBaseDao.findLists(AdminUser.class, mode);			request.setAttribute("unionList", unionList);			if (message != null) {				mode.clearQuery();				mode.combPreEquals("isValid", true);				mode.combPreEquals("messageCenter.id", message.getId(), "messageCenterId");				List<AdminUserMessage> temporaryUserList = dateBaseDao.findLists(AdminUserMessage.class, mode);				request.setAttribute("temporaryUserList", temporaryUserList);			}			if (user.getLevel() >= StringUtil.ADMIN) {				return "checkCityUeditor";			}			return "cityUeditor";		}    }        @Override    public MessageCenter getMessage(Integer id, Integer type){    	MessageCenter message = null;		if (id != null&&type==null) {			message = messageCenterDAO.findById(id);		}		if(type!=null){			List<MessageCenter> mlist = messageCenterDAO.findByPropertyWithValid("type", type);			message = mlist.size()==0?null:mlist.get(0);		}		return message;    }        @Override    public String save(Integer id, String author, String title, String remark, String cover,Integer type, Integer isTimer,    		String fixTime, String content, HttpServletRequest request){		int current_user_id = (Integer) request.getSession().getAttribute("currentUserId");		MessageCenter savemc;		AdminUser adminUser;		adminUser = adminUserDAO.findById(current_user_id);		if (id != null) {			savemc = messageCenterDAO.findById(id);		}else if(type > 0){			List<MessageCenter> mlist = messageCenterDAO.findByPropertyWithValid("type", type);			if(mlist.size()>0){				savemc = mlist.get(0);			}else{				savemc = new MessageCenter();			}    	}else {			savemc = new MessageCenter();		}		savemc.setIsValid(true);		savemc.setCreateTime(new java.sql.Timestamp(System.currentTimeMillis()));		savemc.setAuthor(author);		savemc.setTitle(title);		savemc.setRemark(remark);		savemc.setCover(cover);		savemc.setType(type);		savemc.setAdminUser(adminUser);		savemc.setContent(content);		if (adminUser.getLevel() >= StringUtil.ADMIN) {			savemc.setCheckStatus(1);			savemc.setIsTimer(0);			savemc.setCenterStatus(1);		} else {			savemc.setCheckStatus(0);			savemc.setIsTimer(isTimer);			savemc.setFixTime(Timestamp.valueOf(fixTime));			if (isTimer == 0) {				savemc.setCenterStatus(1);			} else {				savemc.setCenterStatus(0);			}		}		messageCenterDAO.save(savemc);				//消息推送		if (savemc.getCheckStatus() == 1) {			// 当消息成功保存到数据后直接透传给APP			try{			List<String> cidIOS = usersDAO.findAllUsersid();			ImpAppInformation push = new ImpAppInformation();			push.pushMessageSingleToListIOS(savemc, cidIOS);			push.pushMessageCenterToApp(savemc);			System.out.println("推送成功");			}catch(Exception e){				e.printStackTrace();				System.out.println("推送失败");							}		}		return "save";    }        @Override	public String del(String ids, HttpServletRequest request) { // 删除		String newIds = null;		String ck = ids.substring(ids.length() - 1, ids.length());		if (",".equals(ck)) {			newIds = ids.substring(0, ids.length() - 1);		} else {			newIds = ids;		}		messageCenterDAO.updatePropertyByIDs("isValid", false, newIds, MessageCenter.class);		return "del";	}    	}