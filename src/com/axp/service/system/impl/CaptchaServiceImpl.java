package com.axp.service.system.impl;import java.sql.Timestamp;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.apache.commons.lang.StringUtils;import org.springframework.stereotype.Service;import com.axp.model.Captcha;import com.axp.service.system.CaptchaService;import com.axp.util.PageInfo;import com.axp.util.QueryModel;import com.axp.util.StringUtil;import com.axp.util.Utility;@Servicepublic class CaptchaServiceImpl extends BaseServiceImpl implements CaptchaService {    @Override    public Map<String, Object> sendCaptcha(String phone) {        Map<String, Object> map = new HashMap<String, Object>();        //int todaynum = captchaDao.getTodaySendTimes(phone);        int random = (int) ((Math.random() * 9 + 1) * 100000);        String content = "【每天积分】验证码：" + random                + ",欢迎使用每天积分手机赚钱工具，请在30分钟内完成验证。每天积分让你的生活更精彩！";        String status = urlUtil.send(phone, content);        if ("Success".equals(status)) {            map.put("status", 0x01);            map.put("message", "发送成功，请在30分钟内输入验证码");        } else {            map.put("status", -0x01);            map.put("message", "发送失败");        }        return map;    }    @Override    public Boolean contaionCaptcha(String phoneNumber, String securityCode) {        return captchaDAO.contaionCaptcha(phoneNumber, securityCode);    }	@Override	public List<Captcha> getCaptchaList(Integer id,String phone, String code,String sTM,String eTM,			 HttpServletRequest request) {//分页，以及普通查询实体不需要用到Dao		Timestamp startTM = null;		Timestamp endTM = null;				if (!StringUtil.isEmpty(sTM)) {//开始时间不为空			startTM=Timestamp.valueOf(sTM);		}		if (!StringUtil.isEmpty(eTM)) {//结束时间不为空			endTM=Timestamp.valueOf(eTM);		}		if(sTM==null){//开始时间不为空，传入的值为空字符串			sTM="";			eTM="";			phone="";		}				 QueryModel model = new QueryModel();//查询条件字段拼接对象		 		 model.combPreEquals("isValid",true);		 model.combEquals("id", id);		 model.combEquals("code", code);		 model.combPreLike("phone",phone,QueryModel.MATCH_FRONT);//这里用模糊查询 phone like '13%'		 		 if(null==endTM){			 model.combPreCompare("createtime",startTM,QueryModel.GREATER_EQUALS); //大于等于开始时间		 }		 if(null==startTM){			 model.combPreCompare("createtime",endTM,QueryModel.LESS_EQUALS);//小于等于结束时间 		 }		 //没有在公司框架找到符合该业务逻辑的方法，在不改动框架的前提下对参数做如下处理		 if(startTM!=null&&endTM!=null){			 model.getSb().append(" AND (createtime >=:starttime");			 model.getSb().append(" AND createtime <=:endtime)");			 model.getPreConditionMap().put("starttime", startTM);			 model.getPreConditionMap().put("endtime", endTM);		 }		 model.setOrder("createtime desc");		 String pagestr = request.getParameter("page");//分页框架每次查询传过来当前是第几页，页面第一次加载为空		 int count = dateBaseDao.findCount(Captcha.class, model);		 PageInfo pageInfo = new PageInfo();		 Utility.setPageInfomation(pageInfo, pagestr, "20", count);//第三个参数每页显示多少条。		 int start = pageInfo.getCurrentPage() * pageInfo.getPageSize();//页面刚进来getCurrentPage = 0 点击下一页 为 1		 int end = pageInfo.getPageSize();//mysql 分页limit 10 10 从第10条记录开始查询 查10条记录		 pageInfo.setParam("&phone="+phone+"&sTM="+sTM+"&eTM="+eTM+"&page=");		 request.setAttribute("pageFoot", pageInfo.getCommonDefaultPageFootView());		 request.setAttribute("phone", phone);		 request.setAttribute("sTM", sTM);		 request.setAttribute("eTM", eTM);		 List<Captcha> messagelist = dateBaseDao.findPageList(Captcha.class, model, start, end);		 request.setAttribute("list", messagelist);		 return messagelist;	}	}