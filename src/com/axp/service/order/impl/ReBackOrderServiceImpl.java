package com.axp.service.order.impl;import java.sql.Timestamp;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.interceptor.TransactionAspectSupport;import com.alibaba.fastjson.JSONObject;import com.axp.dao.AdminUserScoreRecordDAO;import com.axp.dao.AdminuserCashpointRecordDAO;import com.axp.dao.ICashmoneyRecordDao;import com.axp.dao.ICashpointsRecordDao;import com.axp.dao.INrpOrderLogDao;import com.axp.dao.IReBackOrderDao;import com.axp.dao.NewRedPaperAddendumDAO;import com.axp.dao.NewRedPaperLogDAO;import com.axp.dao.NewRedPaperSettingDAO;import com.axp.dao.ReBaseGoodsDAO;import com.axp.dao.ReGoodsorderItemDAO;import com.axp.dao.ScorerecordsDAO;import com.axp.model.AdminUser;import com.axp.model.AdminUserScoreRecord;import com.axp.model.AdminuserCashpointRecord;import com.axp.model.CashmoneyRecord;import com.axp.model.NewRedPaperAddendum;import com.axp.model.NewRedPaperLog;import com.axp.model.NrpOrderLog;import com.axp.model.ReBackOrder;import com.axp.model.ReBaseGoods;import com.axp.model.ReGoodsorder;import com.axp.model.ReGoodsorderItem;import com.axp.model.Scorerecords;import com.axp.model.SellerMoneyRecord;import com.axp.model.Users;import com.axp.service.alipay.AlipayRefundService;import com.axp.service.order.ReBackOrderService;import com.axp.service.system.UserSystemMessageService;import com.axp.service.system.impl.BaseServiceImpl;import com.axp.service.weixin.WeixinRefundService;import com.axp.service.yilian.YiLianRefundService;import com.axp.util.CalcUtil;import com.axp.util.DateUtil;import com.axp.util.PageInfo;import com.axp.util.QueryModel;import com.axp.util.StringUtil;import com.axp.util.Utility;@Servicepublic class ReBackOrderServiceImpl extends BaseServiceImpl implements ReBackOrderService {		@Autowired	private IReBackOrderDao reBackOrderDao;	@Autowired	private ReGoodsorderItemDAO reGoodsorderItemDAO;	@Autowired	private ICashpointsRecordDao cashpointsRecordDao;	@Autowired	public ReBaseGoodsDAO reBaseGoodsDAO;	@Autowired	private AdminuserCashpointRecordDAO adminuserCashpointDao;	@Autowired 	public ICashmoneyRecordDao cashmoneyRecordDao;	@Autowired	public ScorerecordsDAO scorerecordsDao;	@Autowired	public ReGoodsorderItemDAO reGoodsorderItemDao;	@Autowired	public NewRedPaperLogDAO nrplDao;	@Autowired	public NewRedPaperAddendumDAO nrpaDao;	@Autowired	public NewRedPaperSettingDAO nrpsDao;	@Autowired	public INrpOrderLogDao nrpOrderLogDao;	@Autowired	public ReBaseGoodsDAO reBaseGoodsDao;	@Autowired	public WeixinRefundService weixinRefundService;	@Autowired	public AlipayRefundService alipayRefundService;	@Autowired	public YiLianRefundService yiLianRefundService;	@Autowired	public UserSystemMessageService userSystemMessageService;	@Autowired	public AdminUserScoreRecordDAO adminUserScoreRecordDao;			@Override	public void getBackList(Integer backState, HttpServletRequest request, HttpServletResponse response){		try{		Integer currentUserId = Integer.parseInt(request.getSession().getAttribute("currentUserId").toString());		String pagestr = StringUtil.getNullValue(request.getParameter("page"));				AdminUser adminUser = adminUserDAO.findById(currentUserId);		QueryModel model = new QueryModel().setOrder("id desc");		if(adminUser.getSellerId()!=null)			model.combPreEquals("seller.id", adminUser.getSellerId(),"sellerId");		else if(adminUser.getLevel()>=StringUtil.ADMIN)			model.combCondition("1=1");		else			model.combCondition("1=2");					if(backState!=null&&backState!=ReBackOrder.BACKSTATE_daishenhe)			model.combCondition("backState !="+ReBackOrder.BACKSTATE_daishenhe);		else			model.combPreEquals("backState", ReBackOrder.BACKSTATE_daishenhe);				model.combPreEquals("isValid", true);				int count = dateBaseDao.findCount(ReBackOrder.class, model);		PageInfo pageInfo = new PageInfo();	    Utility.setPageInfomation(pageInfo, pagestr, "5", count);	    int start = pageInfo.getCurrentPage() * pageInfo.getPageSize();	    int end = pageInfo.getPageSize();		List<ReBackOrder> backList = dateBaseDao.findPageList(ReBackOrder.class, model, start, end);				StringBuffer param = new StringBuffer();		if(backState!=null){			param.append("&backState="+backState);		}		pageInfo.setParam(param + "&page=");						request.setAttribute("backList", backList);        request.setAttribute("page", pagestr);        request.setAttribute("pageFoot", pageInfo.getCommonDefaultPageFootView());				}catch(Exception e){			e.printStackTrace();        	TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}	}			@Override	public void getBackListForPay(Integer backState, HttpServletRequest request, HttpServletResponse response){		try{		Integer currentUserId = Integer.parseInt(request.getSession().getAttribute("currentUserId").toString());		String pagestr = StringUtil.getNullValue(request.getParameter("page"));				AdminUser adminUser = adminUserDAO.findById(currentUserId);		QueryModel model = new QueryModel().setOrder("id desc");		if(adminUser.getLevel()>=95){		model.combPreEquals("backState", backState);		model.combPreEquals("isValid", true);		int count = dateBaseDao.findCount(ReBackOrder.class, model);		PageInfo pageInfo = new PageInfo();	    Utility.setPageInfomation(pageInfo, pagestr, "5", count);	    int start = pageInfo.getCurrentPage() * pageInfo.getPageSize();	    int end = pageInfo.getPageSize();		List<ReBackOrder> backList = dateBaseDao.findPageList(ReBackOrder.class, model, start, end);				StringBuffer param = new StringBuffer();		if(backState!=null){			param.append("&backState="+backState);		}		pageInfo.setParam(param + "&page=");						request.setAttribute("backList", backList);        request.setAttribute("page", pagestr);        request.setAttribute("pageFoot", pageInfo.getCommonDefaultPageFootView());		}						}catch(Exception e){			e.printStackTrace();        	TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}	}			@Override	public void getBackOrder(Integer id, HttpServletRequest request, HttpServletResponse response){		ReBackOrder border = reBackOrderDao.findById(id);		request.setAttribute("backOrder", border);		request.setAttribute("order", border.getOrderItem().getOrder());		getOtherBackmoney(request, border);	}		@Override	public void saveBackOrder(ReBackOrder reBackOrder, HttpServletRequest request, HttpServletResponse response){		ReBackOrder order = reBackOrderDao.findById(reBackOrder.getId());		order.setBackmoney(reBackOrder.getBackmoney());		order.setBackstate(reBackOrder.getBackstate());		order.setReason(reBackOrder.getReason());		order.setCheckMessage(reBackOrder.getCheckMessage());		order.setBacktype(reBackOrder.getBacktype());	}	@Override	public Map<String, Object> tuidan(HttpServletRequest request) {		Map<String,Object> map = new HashMap<>();		try{				Integer id = Integer.parseInt(request.getParameter("id"));    	Integer status = Integer.parseInt(request.getParameter("status"));    	String reason = request.getParameter("reason");    	String checkMessage = request.getParameter("checkMessage");    	String jiner = request.getParameter("jiner");    	    	QueryModel queryModel = new QueryModel();    	queryModel.clearQuery();    	queryModel.combPreEquals("id", id);    	ReBackOrder reBackOrder = (ReBackOrder) dateBaseDao.findOne(ReBackOrder.class, queryModel);    	//退单详情		double money = StringUtils.isEmpty(jiner)?0d:Double.valueOf(jiner);//现金		reBackOrder.setBackmoney(money);		reBackOrder.setBackstate(status);    	reBackOrder.setReason(reason);    	reBackOrder.setCheckMessage(checkMessage);    	reBackOrderDao.update(reBackOrder);    	    	queryModel.clearQuery();    	queryModel.combPreEquals("id", reBackOrder.getOrderItem().getId());    	ReGoodsorderItem item = (ReGoodsorderItem) dateBaseDao.findOne(ReGoodsorderItem.class, queryModel);    	if(status==ReBackOrder.BACKSTATE_butongguo){    		item.setIsBack(ReGoodsorder.ke_tui_dan);    		reGoodsorderItemDAO.update(item);    		ReGoodsorder goodsorder = reGoodsorderDAO.findById(item.getOrder().getId());    		goodsorder.setIsHasItems(true);    		goodsorder.setPayPrice(goodsorder.getPayPrice()+item.getPayPrice());    		goodsorder.setStatus(reBackOrder.getExOrderStatus());//修改订单状态到申请退单前的状态    		reGoodsorderDAO.update(goodsorder);    		    		queryModel.clearQuery();			queryModel.combPreEquals("isValid", true);			queryModel.combPreEquals("relateId", item.getId(), "relateId");			List<CashmoneyRecord> recordList = dateBaseDao.findLists(CashmoneyRecord.class, queryModel);			if (recordList!=null&&recordList.size()>0) {				StringBuffer sb = new StringBuffer();				for(int i=0;i<recordList.size();i++){					if(i==(recordList.size()-1)){						sb.append(recordList.get(i).getRelateId().toString());					}else{						sb.append(recordList.get(i).getRelateId().toString()+",");					}				}				dateBaseDao.updateByHQL("UPDATE CashmoneyRecord SET IsValid="+true+" where relateId in("+sb.toString()+")");							}						if(item.getReGoodsOfSellerMall()!=null && item.getReGoodsOfSellerMall().getIsSendScore()!=null && item.getReGoodsOfSellerMall().getSendScoreNum()!=null){				if(item.getReGoodsOfSellerMall().getIsSendScore() && item.getReGoodsOfSellerMall().getSendScoreNum()>0){					Integer score = item.getReGoodsOfSellerMall().getSendScoreNum();					Users user = item.getUser();											int uscore = (int) CalcUtil.add(user.getScore(), score);						user.setScore(uscore);						usersDAO.saveOrUpdate(user);					    Scorerecords scorerecords = new Scorerecords();						scorerecords.setBeforeScore(user.getScore());						scorerecords.setAfterScore(uscore);						scorerecords.setIsvalid(true);						scorerecords.setCreatetime(new Timestamp(System.currentTimeMillis()));						scorerecords.setValidityTime(new Timestamp(DateUtil.addDay2Date(180, new Date()).getTime()));						scorerecords.setScore(score);						scorerecords.setScoretype("商品"+item.getReGoodsOfSellerMall().getSnapshotGoods().getName()+"退单审核不通过，返还赠送的"+score+"积分");						scorerecords.setRemark("商品"+item.getReGoodsOfSellerMall().getSnapshotGoods().getName()+"退单审核不通过，返还赠送的"+score+"积分");						scorerecords.setType(17);						scorerecords.setAdminuserId(47);						scorerecords.setForeignId(user.getId());						scorerecords.setUsers(user);						scorerecordsDao.save(scorerecords);				}			}												    		List<Users> users=new ArrayList<Users>();			users.add(goodsorder.getUser());			userSystemMessageService.saveMessage("您的退单审核不通过，可联系商家沟通",StringUtil.MESSAGE_DINGDAN, "退单审核不通过", users, goodsorder.getId()+"", 0d,1);		    	}    	    	if(status==ReBackOrder.BACKSTATE_yishenhe){//审核通过    		    		    		if(item.getReGoodsOfSellerMall()!=null && item.getReGoodsOfSellerMall().getIsSendScore()!=null && item.getReGoodsOfSellerMall().getSendScoreNum()!=null){				if(item.getReGoodsOfSellerMall().getIsSendScore() && item.getReGoodsOfSellerMall().getSendScoreNum()>0){					Integer score = item.getReGoodsOfSellerMall().getSendScoreNum();					Users user = item.getUser();										List<AdminUserScoreRecord> ausrlist= adminUserScoreRecordDao.findByPropertyWithValid("item.id", item.getId());																				 					if(ausrlist!=null && ausrlist.size()>0){						for(AdminUserScoreRecord ausr :ausrlist){							AdminUser adminUser = ausr.getAdminUser();							adminUser.setScore((int)CalcUtil.add(adminUser.getScore(), score));									adminUserDAO.saveOrUpdate(ausr.getAdminUser());							AdminUserScoreRecord scoreRecord2 = new AdminUserScoreRecord();							scoreRecord2.setAdminUser(adminUser);							scoreRecord2.setBeforeScore(adminUser.getScore());							scoreRecord2.setAfterScore(score);							scoreRecord2.setSurplusScore(score);							scoreRecord2.setCreateTime(new Timestamp(System.currentTimeMillis()));							scoreRecord2.setScore(score);							scoreRecord2.setIsValid(true);							scoreRecord2.setType(17);							scoreRecord2.setFromAdminUser(adminUser);							scoreRecord2.setItem(item);							scoreRecord2.setRemark(user.getName()+"购买的积分赠送商品"+item.getReGoodsOfSellerMall().getSnapshotGoods().getName()+"退单已审核通过,返还所送"+score+"积分");							adminUserScoreRecordDao.save(scoreRecord2);						}											}				}			}    		    		    		    		if(money==0){    			reBackOrder.setBackstate(30);    			if(reBackOrder.getOrderItem().getPayScore()>0){    			Users user =reBackOrder.getOrderItem().getOrder().getUser();    			scorerecordsDao.updateRecord(user, reBackOrder.getOrderItem().getPayScore(), ScorerecordsDAO.BUY,"退单返还积分："+reBackOrder.getOrderItem().getPayScore());    			user.setScore(user.getScore()==null?0:user.getScore()+reBackOrder.getOrderItem().getPayScore());    			usersDAO.update(user);    			}    		}    		    		    		item.setIsBack(ReGoodsorder.tong_yi_tui_dan);    		reGoodsorderItemDAO.update(item);    		    		queryModel.clearQuery();    		queryModel.combPreEquals("order.id",item.getOrder().getId(),"orderId");    		queryModel.combCondition("(isBack = "+ReGoodsorder.ke_tui_dan+" or isBack = "+ReGoodsorder.bu_ke_tui_dan+")");    		int count = dateBaseDao.findCount(ReGoodsorderItem.class, queryModel);    		ReGoodsorder goodsorder = reGoodsorderDAO.findById(item.getOrder().getId());    		if(count==0){    			goodsorder.setIsHasItems(false);    		}else{    			goodsorder.setIsHasItems(true);    		}    		reGoodsorderDAO.update(goodsorder);    		    		//商家退款临时记录    		queryModel.clearQuery();			queryModel.combPreEquals("relateId", item.getOrder().getId());			queryModel.combPreEquals("relateObject",ReGoodsorder.class.getSimpleName());			List<SellerMoneyRecord> recordList =dateBaseDao.findPageList(SellerMoneyRecord.class, queryModel,0,1);			if(recordList.size()>0){				SellerMoneyRecord record = recordList.get(0);				record.setRemark(record.getRemark()+":"+record.getMoney()+",户退单减去"+money+"。");				record.setMoney(CalcUtil.sub(record.getMoney()==null?0.0:record.getMoney(), money));				sellerMoneyRecordDao.update(record);			}						//商家退款临时记录    								//特产及99特惠分佣处理			if(ReBaseGoods.LocalSpecialtyMall.equals(item.getMallClass()) || ReBaseGoods.NineNineMall.equals(item.getMallClass())){//99特惠，总部商城 分佣				queryModel.clearQuery();				queryModel.combPreEquals("relateId", item.getId());				queryModel.combPreEquals("type", -1);				List<CashmoneyRecord> moneyList =dateBaseDao.findPageList(CashmoneyRecord.class, queryModel,0,Integer.MAX_VALUE);				if(moneyList.size()>0){					for(CashmoneyRecord cr :moneyList){					cr.setRelateName("订单"+item.getId()+"已退单！分佣取消！");					cr.setIsValid(false);					cr.setMoney(0d);					cashmoneyRecordDao.update(cr);					}				}								queryModel.clearQuery();				queryModel.combPreEquals("orderItem.id", item.getId(),"orderItemId");				queryModel.combPreEquals("type", -1);				List<AdminuserCashpointRecord> adminList =dateBaseDao.findPageList(AdminuserCashpointRecord.class, queryModel,0,Integer.MAX_VALUE);				if(adminList.size()>0){					for(AdminuserCashpointRecord cr:adminList){					cr.setRemark("订单"+item.getId()+"已退单！分佣取消！");					cr.setIsValid(false);					cr.setCashpoint(0d);					adminuserCashpointDao.update(cr);					}				}							}			//用户分佣临时数据    		    	}else{//审核不通过    		    		    		    		    		    		    	}    	    	if(status==ReBackOrder.BACKSTATE_buketuidan){    		    		item.setIsBack(ReGoodsorder.bu_ke_tui_dan);    		reGoodsorderItemDAO.update(item);    		ReGoodsorder goodsorder = reGoodsorderDAO.findById(item.getOrder().getId());    		goodsorder.setIsHasItems(true);    		goodsorder.setPayPrice(goodsorder.getPayPrice()+item.getPayPrice());    		goodsorder.setStatus(reBackOrder.getExOrderStatus());//修改订单状态到申请退单前的状态    		reGoodsorderDAO.update(goodsorder);    		    		queryModel.clearQuery();			queryModel.combPreEquals("isValid", true);			queryModel.combPreEquals("relateId", item.getId(), "relateId");			List<CashmoneyRecord> recordList = dateBaseDao.findLists(CashmoneyRecord.class, queryModel);			if (recordList!=null&&recordList.size()>0) {				StringBuffer sb = new StringBuffer();				for(int i=0;i<recordList.size();i++){					if(i==(recordList.size()-1)){						sb.append(recordList.get(i).getRelateId().toString());					}else{						sb.append(recordList.get(i).getRelateId().toString()+",");					}				}				dateBaseDao.updateByHQL("UPDATE CashmoneyRecord SET IsValid="+true+" where relateId in("+sb.toString()+")");							}						if(item.getReGoodsOfSellerMall()!=null && item.getReGoodsOfSellerMall().getIsSendScore()!=null && item.getReGoodsOfSellerMall().getSendScoreNum()!=null){				if(item.getReGoodsOfSellerMall().getIsSendScore() && item.getReGoodsOfSellerMall().getSendScoreNum()>0){					Integer score = item.getReGoodsOfSellerMall().getSendScoreNum();					Users user = item.getUser();											int uscore = (int) CalcUtil.add(user.getScore(), score);						user.setScore(uscore);						usersDAO.saveOrUpdate(user);					    Scorerecords scorerecords = new Scorerecords();						scorerecords.setBeforeScore(user.getScore());						scorerecords.setAfterScore(uscore);						scorerecords.setIsvalid(true);						scorerecords.setCreatetime(new Timestamp(System.currentTimeMillis()));						scorerecords.setValidityTime(new Timestamp(DateUtil.addDay2Date(180, new Date()).getTime()));						scorerecords.setScore(score);						scorerecords.setScoretype("商品"+item.getReGoodsOfSellerMall().getSnapshotGoods().getName()+"退单审核不通过，返还赠送的"+score+"积分");						scorerecords.setRemark("商品"+item.getReGoodsOfSellerMall().getSnapshotGoods().getName()+"退单审核不通过，返还赠送的"+score+"积分");						scorerecords.setType(17);						scorerecords.setAdminuserId(47);						scorerecords.setForeignId(user.getId());						scorerecords.setUsers(user);						scorerecordsDao.save(scorerecords);				}			}						    		List<Users> users=new ArrayList<Users>();			users.add(goodsorder.getUser());			userSystemMessageService.saveMessage("您的退单审核不通过，可联系商家沟通",StringUtil.MESSAGE_DINGDAN, "退单审核不通过", users, goodsorder.getId()+"", 0d,1);		    	}    	    	    	    	    	    	map.put("status", true);		return map;		}catch(Exception e){			e.printStackTrace();			map.put("status", false);        	TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();			return map;		}	}	@Override	public void tuikuan(HttpServletRequest request, HttpServletResponse response) {		String id = request.getParameter("id");		ReBackOrder order = reBackOrderDao.findById(Integer.parseInt(id));		request.setAttribute("backOrder", order);		request.setAttribute("order", order.getOrderItem().getOrder());		getOtherBackmoney(request, order);	}	/*	public Map<String, Object> tuikuanDetails(HttpServletRequest request,			HttpServletResponse response) {		String id = request.getParameter("id");		String jiner = request.getParameter("jiner");		Map<String,Object> map = new HashMap<>();		if(id!=null){			ReBackOrder backOrder = reBackOrderDao.findById(Integer.parseInt(id));			//已退款的订单不可再退			if(backOrder.getBackstate()!=ReBackOrder.BACKSTATE_yishenhe){				map.put("status", false);				return map;			}			//粉丝详情			Users user = backOrder.getUser();			if(backOrder.getPaytype()==ReBackOrder.BACKTYPR_axp|| backOrder.getOrderItem().getOrder().getPayType()==ReGoodsorder.PAYTYPE_axp ||					(backOrder.getType().equals(ReBackOrder.TYPE_yuanlufanhui)&&backOrder.getPaytype().equals(ReBackOrder.PAYTYPE_axp)) ){				//退单详情				double money = backOrder.getOrderItem().getPayPrice();//				backOrder.setBackmoney(money);					//退款记录				cashmoneyRecordDao.updateRecord(user,money,ICashmoneyRecordDao.BACK,Integer.parseInt(id),ReBackOrder.class.getSimpleName());				double usermoney = (user.getMoney()==null?0.0:user.getMoney())+money;				if(backOrder.getType().equals(ReBackOrder.TYPE_axp)||						(backOrder.getType().equals(ReBackOrder.TYPE_yuanlufanhui)&&backOrder.getPaytype().equals(ReBackOrder.PAYTYPE_axp))){					user.setMoney(usermoney);				}else if(backOrder.getType().equals(ReBackOrder.TYPE_yuanlufanhui)&&backOrder.getPaytype().equals(ReBackOrder.PAYTYPE_wx)){					weixinRefundService.refundByWeixin(Integer.parseInt(id));//微信退款				}else if(backOrder.getType().equals(ReBackOrder.TYPE_yuanlufanhui)&&backOrder.getPaytype().equals(ReBackOrder.PAYTYPE_zfb)){					//weixinRefundService.refundByWeixin(Integer.parseInt(id));//微信退款					alipayRefundService.refund(Integer.parseInt(id));//支付宝退款									};;								//商家退款临时记录				QueryModel queryModel = new QueryModel();				queryModel.combPreEquals("relateId", backOrder.getOrderItem().getOrder().getId());				queryModel.combPreEquals("relateObject",ReGoodsorder.class.getSimpleName());				List<SellerMoneyRecord> recordList =dateBaseDao.findPageList(SellerMoneyRecord.class, queryModel,0,1);				if(recordList.size()>0){					SellerMoneyRecord record = recordList.get(0);					record.setMoney(CalcUtil.sub(recordList.get(0).getMoney()==null?0.0:recordList.get(0).getMoney(), money));					sellerMoneyRecordDao.update(record);				}			}			//所需总积分			int score = backOrder.getPayScore();			//所需总红包			double cashPoint = backOrder.getPayCashpoint();			user.setScore(score+user.getScore());			user.setCashPoints(cashPoint+user.getCashPoints());			usersDAO.update(user);						//===============积分，红包记录==================================			if (cashPoint!= 0) {				cashpointsRecordDao.updateRecord(user,cashPoint, ICashpointsRecordDao.BACK);			}			if (score != 0) {				scorerecordsDao.updateRecord(user, score-user.getScore(), ScorerecordsDAO.BUY);			}			drawbackRedPaper(backOrder.getOrderItem().getId());			//===========================================================			//修改退单状态			backOrder.setBackstate(ReBackOrder.BACKSTATE_yizhifu);			reBackOrderDao.update(backOrder);			//修改子订单状态			ReGoodsorderItem  item = backOrder.getOrderItem();			item.setIsBack(ReGoodsorder.yi_tui_dan);			reGoodsorderItemDAO.update(item);			//==============库存=======================================						try {				//减少销量				reBaseGoodsDao.addGoodsSalesVolume(item.getMallClass()+item.getGoodsId(),-item.getGoodQuantity());				//增加库存				updateGoodsStock(item, item.getGoodQuantity(), true);			} catch (Exception e) {				e.printStackTrace();			}			map.put("status", true);			return map;		}		return null;	}*/			public void chargeback(Integer backOrderId ) throws Exception{				Integer status =ReBackOrder.BACKSTATE_yizhifu;		if(backOrderId!=null){			ReBackOrder backOrder = reBackOrderDao.findById(backOrderId);			//已退款的订单不可再退			if(backOrder.getBackstate()==ReBackOrder.BACKSTATE_tuidanwancheng){				return ;			}			//粉丝详情			double money = backOrder.getBackmoney();//现金			//小于等于0 不处理			if(money<=0){				return;			}			Users user = backOrder.getUser();			if(backOrder.getType()==100){//每天积分钱包				ReGoodsorder goodsorder=backOrder.getOrderItem().getOrder();				Double walletPay=CalcUtil.sub(goodsorder.getWalletPay(),backOrder.getBackmoney());				addMoneyByUser(user,money,backOrder);//增加钱包金额					List<ReGoodsorder> orders = regoodsorderDAO.findByPropertyWithValid("weixinCode", backOrder.getOrderItem().getOrder().getWeixinCode());					for (ReGoodsorder o : orders) {						o.setWalletPay(walletPay);						regoodsorderDAO.update(o);					}								}else {//原路返回				if(backOrder.getOrderItem().getOrder().getPayType()==ReGoodsorder.PAYTYPE_wx){//微信支付						//如果合并支付中 钱包金额足够推掉单件商品 那么优先从钱包扣除							Map<String, Object> statusMap =weixinRefundService.refundByWeixin(backOrderId);//微信退款							if(statusMap.get("FAIL")!=null){																status= ReBackOrder.BACKSTATE_yishenhe;							}				}else if(backOrder.getOrderItem().getOrder().getPayType()==ReGoodsorder.PAYTYPE_zfb){//支付宝					Map<String, Object> statusMap =alipayRefundService.refund(backOrderId);//支付宝退款					if(statusMap.get("FAIL")!=null){												status= ReBackOrder.BACKSTATE_yishenhe;					}									}else if(backOrder.getOrderItem().getOrder().getPayType()==ReGoodsorder.PAYTYPE_axp){//钱包						ReGoodsorder goodsorder=backOrder.getOrderItem().getOrder();						Double walletPay=CalcUtil.sub(goodsorder.getWalletPay(),backOrder.getBackmoney());						addMoneyByUser(user,money,backOrder);						List<ReGoodsorder> orders = regoodsorderDAO.findByPropertyWithValid("weixinCode", backOrder.getOrderItem().getOrder().getWeixinCode());						for (ReGoodsorder o : orders) {							o.setWalletPay(walletPay);							regoodsorderDAO.update(o);						}											}else if(backOrder.getOrderItem().getOrder().getPayType()==ReGoodsorder.PAYTYPE_yl){//易联					Map<String, Object> statusMap =yiLianRefundService.refundByYiLian(backOrderId);						if(statusMap.get("FAIL")!=null){							status= ReBackOrder.BACKSTATE_yishenhe;						}else{													}				}			}							if (user!=null&&status== ReBackOrder.BACKSTATE_yizhifu) {					List<Users> ulist = new ArrayList<Users>();					ulist.add(user);					userSystemMessageService.saveMessage("退单已支付成功！", StringUtil.MESSAGE_TUIKUAN, "退单支付", ulist, String.valueOf(backOrder.getOrderItem().getOrder().getId()), money,1);				}				 					ReGoodsorderItem item = backOrder.getOrderItem();					if(status== ReBackOrder.BACKSTATE_yishenhe){						item.setIsBack(ReGoodsorder.tong_yi_tui_dan);					}else{						item.setIsBack(ReGoodsorder.yi_tui_dan); //修改订单项状态					}					item.setStatus(ReGoodsorder.yi_wan_cheng);										reGoodsorderItemDao.update(item);										//减少销量					reBaseGoodsDAO.addGoodsSalesVolume(item.getMallClass()+item.getGoodsId(),-item.getGoodQuantity());										//修改订单状态 					ReGoodsorder order = item.getOrder();					order.setIsHasItems(false);					order.setPayPrice(order.getPayPrice()-item.getPayPrice());					order.setStatus(ReGoodsorder.yi_wan_cheng);					regoodsorderDAO.update(order);										backOrder.setBackstate(status);					reBackOrderDao.update(backOrder);										adminuserCashpointDao.delRecordByOrderItemId(item);					iCashmoneyRecordDao.updateMoneyById(item.getId());				}else{					if(!TransactionAspectSupport.currentTransactionStatus().isRollbackOnly()){						TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();					}				}			}			@Override	public Map<String, Object> tuikuanDetail(HttpServletRequest request,			HttpServletResponse response) throws Exception {				String id = request.getParameter("id");		String jiner = request.getParameter("jiner");		Map<String,Object> map = new HashMap<>();		map.put("status", false);		boolean flag=false;		if(id!=null){			ReBackOrder backOrder = reBackOrderDao.findById(Integer.parseInt(id));			//已退款的订单不可再退			if(backOrder.getBackstate()!=ReBackOrder.BACKSTATE_yishenhe){				map.put("status", false);				return map;			}			//粉丝详情			double money = backOrder.getBackmoney();//现金			//小于等于0 不处理			if(money<=0){				map.put("status", false);				return map;			}			Users user = backOrder.getUser();			if(backOrder.getType()==100){//每天积分钱包				ReGoodsorder goodsorder=backOrder.getOrderItem().getOrder();				Double walletPay=CalcUtil.sub(goodsorder.getWalletPay(),backOrder.getBackmoney());				addMoneyByUser(user,money,backOrder);//增加钱包金额					List<ReGoodsorder> orders = regoodsorderDAO.findByPropertyWithValid("weixinCode", backOrder.getOrderItem().getOrder().getWeixinCode());					for (ReGoodsorder o : orders) {						o.setWalletPay(walletPay);						regoodsorderDAO.update(o);					}			}else {//原路返回				if(backOrder.getOrderItem().getOrder().getPayType()==ReGoodsorder.PAYTYPE_wx){//微信支付					//如果合并支付中 钱包金额足够推掉单件商品 那么优先从钱包扣除						Map<String, Object> statusMap =weixinRefundService.refundByWeixin(Integer.parseInt(id));//微信退款						if(statusMap.get("FAIL")!=null){							map.put("status", false);							return map;						}else{							flag=true;						}				}else if(backOrder.getOrderItem().getOrder().getPayType()==ReGoodsorder.PAYTYPE_zfb){//支付宝					System.out.println("支付宝退款开始");										Map<String, Object> statusMap =alipayRefundService.refund(Integer.parseInt(id));//支付宝退款										System.out.println("支付宝退款开始"+statusMap);										if(statusMap.get("FAIL")!=null){						map.put("status", false);						return map;					}else{						flag=true;					}									}else if(backOrder.getOrderItem().getOrder().getPayType()==ReGoodsorder.PAYTYPE_axp){//钱包						ReGoodsorder goodsorder=backOrder.getOrderItem().getOrder();						Double walletPay=CalcUtil.sub(goodsorder.getWalletPay(),backOrder.getBackmoney());						addMoneyByUser(user,money,backOrder);						List<ReGoodsorder> orders = regoodsorderDAO.findByPropertyWithValid("weixinCode", backOrder.getOrderItem().getOrder().getWeixinCode());						for (ReGoodsorder o : orders) {							o.setWalletPay(walletPay);							regoodsorderDAO.update(o);						}					}else if(backOrder.getOrderItem().getOrder().getPayType()==ReGoodsorder.PAYTYPE_yl){//易联					Map<String, Object> statusMap =yiLianRefundService.refundByYiLian(Integer.parseInt(id));						if(statusMap.get("FAIL")!=null){							map.put("status", false);							return map;						}else{							flag=true;						}				}			}						if(flag){				if (user!=null) {					List<Users> ulist = new ArrayList<Users>();					ulist.add(user);					userSystemMessageService.saveMessage("退单已支付成功！", StringUtil.MESSAGE_TUIKUAN, "退单支付", ulist, String.valueOf(backOrder.getOrderItem().getOrder().getId()), money,1);				}			}								//所需总积分			int score = backOrder.getPayScore();			//所需总红包			double cashPoint = backOrder.getPayCashpoint();			user.setScore(score+user.getScore());			//user.setCashPoints(cashPoint+user.getCashPoints());			usersDAO.update(user);						//===============积分，红包记录==================================			if (score != 0) {				scorerecordsDao.updateRecord(user, score, ScorerecordsDAO.BUY);			}			/*if (cashPoint!= 0) {				cashpointsRecordDao.updateRecord(user,cashPoint, ICashpointsRecordDao.BACK);			}						drawbackRedPaper(backOrder.getOrderItem().getId());*/			//===========================================================			//修改退单状态			backOrder.setBackstate(ReBackOrder.BACKSTATE_yizhifu);			reBackOrderDao.update(backOrder);			//修改子订单状态			ReGoodsorderItem  item = backOrder.getOrderItem();			item.setIsBack(ReGoodsorder.yi_tui_dan);			reGoodsorderItemDAO.update(item);			//==============库存=======================================			map.put("status", true);							//减少销量				reBaseGoodsDao.addGoodsSalesVolume(item.getMallClass()+item.getGoodsId(),-item.getGoodQuantity());				//增加库存				//updateGoodsStock(item, item.getGoodQuantity(), true);						return map;		}		return map;	}				public void  addMoneyByUser(Users user,double money,ReBackOrder backOrder){		cashmoneyRecordDao.updateRecord(user,money,ICashmoneyRecordDao.BACK,backOrder.getId(),ReBackOrder.class.getSimpleName());		double usermoney = (user.getMoney()==null?0.0:user.getMoney())+money;		user.setMoney(usermoney);				if (user!=null) {			List<Users> ulist = new ArrayList<Users>();			ulist.add(user);			userSystemMessageService.saveMessage("退单已支付成功！", StringUtil.MESSAGE_TUIKUAN, "退单支付", ulist, String.valueOf(backOrder.getOrderItem().getOrder().getId()), money,1);		}	}			private void drawbackRedPaper(Integer orderId) {		QueryModel qm = new QueryModel();					//修改红包支付记录		qm.clearQuery();		qm.combPreEquals("relateId", orderId);		qm.combPreEquals("relateBean", NrpOrderLog.RELATEBEAN_reGoodsorderItem);		List<NrpOrderLog> nrpOrderLogList = dateBaseDao.findLists(NrpOrderLog.class, qm);			NewRedPaperLog nrpl;		Map<Integer,Integer> settingMap = new HashMap<Integer, Integer>();					for(int i=0;i<nrpOrderLogList.size();i++){					//修改红包支付记录			nrpOrderLogList.get(i).setStatus(NrpOrderLog.STATUS_DRAWBACK);							//获取当前红包领取记录			qm.clearQuery();			qm.combPreEquals("id",nrpOrderLogList.get(i).getNrpl().getId());			nrpl = dateBaseDao.findLists(NewRedPaperLog.class, qm).get(0);						//判断当前红包是否有余额			if(nrpl.getMoney()==nrpl.getAvail()+nrpOrderLogList.get(i).getUserMoney()){				nrpl.setStatus(NewRedPaperLog.STATUS_NOTUSR);			}else{							nrpl.setStatus(NewRedPaperLog.STATUS_SPLITPAY);			}			nrpl.setAvail(nrpl.getAvail()+nrpOrderLogList.get(i).getUserMoney());			//获取红包附表记录			qm.clearQuery();			qm.combEquals("id", nrpl.getAddendum().getId());			NewRedPaperAddendum addendum = dateBaseDao.findLists(NewRedPaperAddendum.class, qm).get(0);			if(settingMap.get(nrpl.getSetting().getId())==null){				settingMap.put(nrpl.getSetting().getId(), 1);			}else{				settingMap.put(nrpl.getSetting().getId(), settingMap.get(nrpl.getSetting().getId())+1);			}			addendum.setAvail(addendum.getAvail()+nrpOrderLogList.get(i).getUserMoney());			nrpOrderLogDao.update(nrpOrderLogList.get(i));			nrplDao.update(nrpl);			nrpaDao.update(addendum);								}			for(Map.Entry<Integer, Integer> entry: settingMap.entrySet()){				nrpsDao.updateAllNunUsed(entry.getKey(),entry.getValue(),"-");			}	}			public void updateGoodsStock(ReGoodsorderItem item, Integer value, boolean isAdd) throws Exception{		ReBaseGoods good = (ReBaseGoods)reBaseGoodsDao.getMallObjByGoodsOrder(item.getMallClass()+item.getGoodsId());		ReBaseGoods newGoods = new ReBaseGoods();		newGoods.setStandardDetails(good.getStandardDetails());		newGoods.setNoStandardRepertory(good.getNoStandardRepertory());		//订单项规格集合		if(!StringUtils.isEmpty(item.getGoodsStandardString())){			JSONObject object = JSONObject.parseObject(item.getGoodsStandardString());			JSONObject spec = object.getJSONObject("secondStandard");			Integer id1 = spec.getInteger("id1");			Integer id2 = spec.getInteger("id2");			Integer id3 = spec.getInteger("id3");			newGoods.editGoodsRepertory(id1, id2, id3, value, isAdd);		}else{			Integer repertory = good.getNoStandardRepertory();			if(isAdd){				repertory += value;			}else{				repertory -= value;			}			newGoods.setNoStandardRepertory(repertory);		}		reBaseGoodsDao.updateRepertory(newGoods.getStandardDetails(),newGoods.getNoStandardRepertory(),				item.getMallClass()+item.getGoodsId());		good = null;		newGoods = null;	}		@Override	public Map<String, Object> untuikuanDetail(HttpServletRequest request) {		Integer id = Integer.parseInt(request.getParameter("id"));		String reason = request.getParameter("reason");    	Map<String,Object> map = new HashMap<>();    	QueryModel queryModel = new QueryModel();    	queryModel.clearQuery();    	queryModel.combPreEquals("id", id);    	ReBackOrder reBackOrder = (ReBackOrder) dateBaseDao.findOne(ReBackOrder.class, queryModel);    	reBackOrder.setBackstate(ReBackOrder.BACKSTATE_butongguo);    	reBackOrder.setReason(reason);    	reBackOrderDao.update(reBackOrder);    	queryModel.clearQuery();    	queryModel.combPreEquals("id", reBackOrder.getOrderItem().getId());    	ReGoodsorderItem item = (ReGoodsorderItem) dateBaseDao.findOne(ReGoodsorderItem.class, queryModel);    	item.setIsBack(ReGoodsorder.ke_tui_dan);    	reGoodsorderItemDAO.update(item);    	ReGoodsorder goodsorder = reGoodsorderDAO.findById(item.getOrder().getId());    	goodsorder.setIsHasItems(true);    	reGoodsorderDAO.update(goodsorder);    	map.put("status", true);		return map;	}		public void getOtherBackmoney(HttpServletRequest request, ReBackOrder reBackOrder){		QueryModel queryModel = new QueryModel();    	queryModel.combPreEquals("orderItem.order.id", reBackOrder.getOrderItem().getOrder().getId(),"orderId");    	queryModel.combPreEquals("backstate", ReBackOrder.BACKSTATE_tuidanwancheng);    	queryModel.combCondition("id != "+reBackOrder.getId());    	Double asd = dateBaseDao.findSum(ReBackOrder.class, "backmoney", queryModel);    	request.setAttribute("otherMoney", asd);	}					/*	public void savePayConfig(List<AccountManage> accountManageList,int type){		for (AccountManage accountManage : accountManageList) {			if(type==1){ //微信				if(accountManage.getType()==WeixinConfig.wx_yhb){ //用户版					WeixinConfig.appid=accountManage.getAppId();					WeixinConfig.app_secret=accountManage.getAppSecret();					WeixinConfig.mch_id=accountManage.getMchId();					WeixinConfig.api_key=accountManage.getApiKey();				}				if(accountManage.getType()==WeixinConfig.wx_sjb){ //商家版					WeixinConfig.s_appid=accountManage.getAppId();					WeixinConfig.s_app_secret=accountManage.getAppSecret();					WeixinConfig.s_mch_id=accountManage.getMchId();					WeixinConfig.s_api_key=accountManage.getApiKey();				}				if(accountManage.getType()==WeixinConfig.wx_gzh){ //公众号					WeixinConfig.gzh_appid=accountManage.getAppId();					WeixinConfig.gzh_app_secret=accountManage.getAppSecret();					WeixinConfig.gzh_mch_id=accountManage.getMchId();					WeixinConfig.gzh_api_key=accountManage.getApiKey();				}			}			if(type==2){ //支付宝				AlipayConfig.seller_id=accountManage.getAliSellerId();				AlipayConfig.private_key=accountManage.getAliPrivateKey();				AlipayConfig.appid=accountManage.getAppId();				AlipayConfig.private_key_pkcs8=accountManage.getAliPrivateKeyPkcs8();				AlipayConfig.ali_public_key=accountManage.getAliPublicKey();				AlipayConfig.key=accountManage.getAliKey();			}			ConstantUtil.AccountName=accountManage.getAccountReceive().getId();		}	}*/						}