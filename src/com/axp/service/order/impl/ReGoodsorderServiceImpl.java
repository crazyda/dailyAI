package com.axp.service.order.impl;import java.sql.Timestamp;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.interceptor.TransactionAspectSupport;import com.axp.dao.AdminuserCashpointRecordDAO;import com.axp.dao.ICashmoneyRecordDao;import com.axp.dao.ICashpointsRecordDao;import com.axp.dao.ISellerMoneyRecordDao;import com.axp.dao.OrderCommentDAO;import com.axp.dao.ReGoodsorderDAO;import com.axp.dao.ReGoodsorderItemDAO;import com.axp.model.AdminUser;import com.axp.model.AdminUserScoreRecord;import com.axp.model.AdminuserCashpointRecord;import com.axp.model.CashmoneyRecord;import com.axp.model.OrderComment;import com.axp.model.ReBackOrder;import com.axp.model.ReBaseGoods;import com.axp.model.ReGoodsOfLocalSpecialtyMall;import com.axp.model.ReGoodsOfScoreMall;import com.axp.model.ReGoodsOfSeckillMall;import com.axp.model.ReGoodsOfSellerMall;import com.axp.model.ReGoodsorder;import com.axp.model.ReGoodsorderItem;import com.axp.model.Seller;import com.axp.model.SellerMoneyRecord;import com.axp.model.Users;import com.axp.query.PageResult;import com.axp.service.order.ReGoodsorderService;import com.axp.service.system.UserSystemMessageService;import com.axp.service.system.impl.BaseServiceImpl;import com.axp.util.CalcUtil;import com.axp.util.DateUtil;import com.axp.util.ExcelUtil;import com.axp.util.PageInfo;import com.axp.util.QueryModel;import com.axp.util.StringUtil;import com.axp.util.UrlUtil;import com.axp.util.Utility;@Servicepublic class ReGoodsorderServiceImpl extends BaseServiceImpl implements ReGoodsorderService {	@Autowired	private ReGoodsorderItemDAO reGoodsorderItemDAO;	@Autowired	private OrderCommentDAO commentDAO;	@Autowired	private UserSystemMessageService userSystemMessageService;		@Autowired 	public ICashmoneyRecordDao cashmoneyRecordDao;		@Autowired	public AdminuserCashpointRecordDAO adminuserCashpointRecordDAO;		@Autowired	public ReGoodsorderDAO goodsorderDAO;	@Override    public PageResult<ReGoodsorder> getReGoodsOrderByAdminUserId(AdminUser adminUser,StringBuffer condition, Integer currentPage, Integer pageSize) throws Exception {        //判断后台用户是否是超级管理员；        if (adminUser.getLevel() >= StringUtil.ADMIN) {//如果是超级管理员；            Long count = reGoodsorderDAO.getCountOfSuperAdmin(adminUser);            List<ReGoodsorder> list = reGoodsorderDAO.getListOfSuperAdmin(adminUser, condition,currentPage, pageSize);            return new PageResult<>(Integer.parseInt(count.toString()), pageSize, currentPage, list);        } else {//如果不是超级管理员；            Long count = reGoodsorderDAO.getCountOfAdminUser(adminUser);            List<ReGoodsorder> list = reGoodsorderDAO.getListOfAdminUser(adminUser,condition, currentPage, pageSize);            return new PageResult<>(Integer.parseInt(count.toString()), pageSize, currentPage, list);        }    }	@Override	public Map<String, Object> ensureByAjax(HttpServletRequest request) {		String id = request.getParameter("id");		Map<String, Object> map = new HashMap<>();		if(StringUtils.isNotBlank(id)){			map.put("status",true );			ReGoodsorder reGoodsorder = reGoodsorderDAO.findById(Integer.parseInt(id));			reGoodsorder.setStatus(ReGoodsorder.dai_fa_huo);			reGoodsorderItemDAO.updateStatusByParent(ReGoodsorder.dai_fa_huo, Integer.parseInt(id));		}else{			map.put("status",false );		}		return map;	}	@Override	public void updateDetail(HttpServletRequest request, Integer id) {		String logisticsCompay = request.getParameter("logisticsCompay");//物流公司    	String logisticsCode = request.getParameter("logisticsCode");//物流单号    	String logisticsType = request.getParameter("logisticsType");//快递运费    	String sellerPhone = request.getParameter("sellerPhone");//商家电话    	String consignmentTime = request.getParameter("consignmentTime");//发货时间    	String sellerAddress = request.getParameter("sellerAddress");//发货地址    	DateUtil dateUtil = new DateUtil();    	QueryModel queryModel = new QueryModel();    	queryModel.clearQuery();    	queryModel.combPreEquals("id", id);    	ReGoodsorder reGoodsorder = (ReGoodsorder) dateBaseDao.findOne(ReGoodsorder.class, queryModel);    	reGoodsorder.setLogisticsCompay(logisticsCompay);    	reGoodsorder.setLogisticsCode(logisticsCode);    	reGoodsorder.setLogisticsType(logisticsType==null?0.0:Double.parseDouble(logisticsType));    	reGoodsorder.setSellerPhone(sellerPhone);    	reGoodsorder.setConsignmentTime(new Timestamp(dateUtil.getDate(consignmentTime).getTime()));    	reGoodsorder.setSellerAddress(sellerAddress);    	reGoodsorder.setStatus(ReGoodsorder.dai_shou_huo);    	reGoodsorderItemDAO.updateStatusByParent(ReGoodsorder.dai_shou_huo, id);	}	@Override	public void getOrderList(Integer adminUserId, HttpServletRequest request,			Integer currentPage ,Integer draw) {		Integer status = request.getParameter("status")==null?0:Integer.parseInt(request.getParameter("status"));		String pagestr = request.getParameter("page");//页码		QueryModel queryModel = new QueryModel();		queryModel.clearQuery();		if(adminUserId != 47){			queryModel.combPreEquals("seller.adminUser.id", adminUserId,"adminUserId");		}				//==============搜索============		String goodsName = request.getParameter("goodsName")==null?"":request.getParameter("goodsName");		String createTime = request.getParameter("createTime")==null?"":request.getParameter("createTime");		String code = request.getParameter("code")==null?"":request.getParameter("code");		String orderCode = request.getParameter("orderCode")==null?"":request.getParameter("orderCode");		String realname = request.getParameter("realname")==null?"":request.getParameter("realname");		String payType = request.getParameter("payType")==null?"":request.getParameter("payType");		//商品名称		if(StringUtils.isNotBlank(goodsName)){			List<Integer> orderIdList = reGoodsorderDAO.getOrderIdByItemName(goodsName);			StringBuffer sb = new StringBuffer();			for(int i = 0 ; i < orderIdList.size(); i++){				if(i==0){					sb =sb.append(orderIdList.get(0));				}else{					sb =sb.append(","+orderIdList.get(i));				}			}			queryModel.combIn("id", sb.toString());			request.setAttribute("goodsName", goodsName);		}		//下单时间		if(StringUtils.isNotBlank(createTime)){					try {				SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月dd日");				Date date = sdf.parse(createTime);				Timestamp beginTime = new Timestamp(DateUtil.getDayStart(date).getTime());				Timestamp endTime = new Timestamp(DateUtil.getDayEnd(date).getTime());				queryModel.combCondition("createTime >='"+beginTime+"' and createTime<='"+endTime+"'");				request.setAttribute("createTime", createTime);			} catch (ParseException e) {				e.printStackTrace();	        	TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();			}		}		// 兑换码		if(StringUtils.isNotBlank(code)){			queryModel.combPreEquals("code", code);			request.setAttribute("code", code);		}		//订单编号		if(StringUtils.isNotBlank(orderCode)){			queryModel.combPreEquals("orderCode", orderCode);			request.setAttribute("orderCode", orderCode);		}		//买家真实名称		if(StringUtils.isNotBlank(realname)){			queryModel.combPreEquals("realname", realname);			request.setAttribute("realname", realname);		}		//支付类型		if(StringUtils.isNotBlank(payType)){			queryModel.combPreEquals("payType", Integer.parseInt(payType));		}		if(draw == null){						if(status!=4){				queryModel.combPreEquals("status", getOrderStatus(status));			}else{				queryModel.combCondition("( status = 40 or status = 50)");			}		}								queryModel.combPreEquals("isValid", true);		queryModel.combPreEquals("isHasItems", true);				PageInfo pageInfo = new PageInfo();		Integer count = 0;		count = dateBaseDao.findCount(ReGoodsorder.class, queryModel);		Utility utility = new Utility();		utility.setPageInfomation(pageInfo,pagestr, "10",count);		int start = pageInfo.getCurrentPage() * pageInfo.getPageSize();		int end = pageInfo.getPageSize();		List<ReGoodsorder> reGoodsorderList = dateBaseDao.findPageList(ReGoodsorder.class, queryModel, start, end);		List<Object> orderList = new ArrayList<>();		Map<String,Object> orderMap = null;		for(ReGoodsorder order : reGoodsorderList){			orderMap = new HashMap<>();			orderMap.put("order", order);			queryModel.clearQuery();			queryModel.combPreEquals("order.id", order.getId(),"orderId");			if(draw!= null){				queryModel.combPreEquals("isLock", 1);							}			List<ReGoodsorderItem> items = dateBaseDao.findLists(ReGoodsorderItem.class, queryModel);			orderMap.put("items", items);			orderMap.put("size", items.size());			try {				if(status==5){					List<Object> list = new ArrayList<>();					for(ReGoodsorderItem item :items){						Map<String,Object> map = new HashMap<>();						queryModel.clearQuery();						queryModel.combPreEquals("reGoodsorderItem.id", item.getId(),"itemId");						OrderComment orderComment = (OrderComment) dateBaseDao.findOne(OrderComment.class, queryModel);						map.put("item", item);						map.put("comment", orderComment);						list.add(map);											}					orderMap.put("itemList", list);				}			} catch (Exception e) {				e.printStackTrace();	        	TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();			}						orderList.add(orderMap);		}		if (status==null) {			pageInfo.setParam("&status=10"+"&page=");		}else{			pageInfo.setParam("&status="+status+"&page=");		}		request.setAttribute("pageFoot", pageInfo.getCommonDefaultPageFootView());		request.setAttribute("page", pagestr);		request.setAttribute("count", count);		request.setAttribute("orderList", orderList);		request.setAttribute("status", status);	}		@Override	public void getOrdersDetailList(Integer adminUserId, HttpServletRequest request){		Integer status = request.getParameter("status")==null?0:Integer.parseInt(request.getParameter("status"));		String pagestr = request.getParameter("page");//页码		QueryModel queryModel = new QueryModel();		queryModel.clearQuery();		queryModel.combPreEquals("isHasItems", true);		queryModel.combCondition(" (seller.id <> 4482 and  seller.id <> 4934  and seller.id <> 4617 and seller.id <> 4869)");				if(status!=40 && status !=50){			queryModel.combPreEquals("status", status);		}else{			queryModel.combCondition("( status = 40 or status = 50)");		}		queryModel.combEquals("isValid",1);		PageInfo pageInfo = new PageInfo();		Integer count = 0;		count = dateBaseDao.findCount(ReGoodsorder.class, queryModel);		Utility utility = new Utility();		utility.setPageInfomation(pageInfo,pagestr, "10",count);		int start = pageInfo.getCurrentPage() * pageInfo.getPageSize();		int end = pageInfo.getPageSize();		List<ReGoodsorder> reGoodsorderList = dateBaseDao.findPageList(ReGoodsorder.class, queryModel, start, end);		List<Object> orderList = new ArrayList<>();		Map<String,Object> orderMap = null;		for(ReGoodsorder order : reGoodsorderList){			orderMap = new HashMap<>();			orderMap.put("order", order);			queryModel.clearQuery();			queryModel.combPreEquals("order.id", order.getId(),"orderId");			List<ReGoodsorderItem> items = dateBaseDao.findLists(ReGoodsorderItem.class, queryModel);			orderMap.put("items", items);			orderMap.put("size", items.size());			try {				if(status==5){					List<Object> list = new ArrayList<>();					for(ReGoodsorderItem item :items){						Map<String,Object> map = new HashMap<>();						queryModel.clearQuery();						queryModel.combPreEquals("reGoodsorderItem.id", item.getId(),"itemId");						OrderComment orderComment = (OrderComment) dateBaseDao.findOne(OrderComment.class, queryModel);						map.put("item", item);						map.put("comment", orderComment);						list.add(map);											}					orderMap.put("itemList", list);				}			} catch (Exception e) {				e.printStackTrace();	        	TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();			}						orderList.add(orderMap);		}		if (status==null) {			pageInfo.setParam("&status=10"+"&page=");		}else{			pageInfo.setParam("&status="+status+"&page=");		}		request.setAttribute("pageFoot", pageInfo.getCommonDefaultPageFootView());		request.setAttribute("page", pagestr);		request.setAttribute("count", count);		request.setAttribute("orderList", orderList);		request.setAttribute("status", status);	}	@Override	public void getOrderById(HttpServletRequest request) {		String orderId = request.getParameter("orderId");		String status = request.getParameter("status");		Map<String,Object> orderMap = new HashMap<>();		QueryModel queryModel = new QueryModel();		queryModel.clearQuery();		queryModel.combPreEquals("id", Integer.parseInt(orderId));		ReGoodsorder order = (ReGoodsorder) dateBaseDao.findOne(ReGoodsorder.class, queryModel);		orderMap.put("order", order);		queryModel.clearQuery();		queryModel.combPreEquals("order.id", order.getId(),"orderId");		List<ReGoodsorderItem> items = dateBaseDao.findLists(ReGoodsorderItem.class, queryModel);		orderMap.put("items", items);		request.setAttribute("orderId", orderId);		request.setAttribute("orderMap", orderMap);		request.setAttribute("status", status);			}	/**	 * 根据前端传值获取订单状态	 * @param status	 * @return	 */	private Integer getOrderStatus(Integer status){	    switch (status) {		case 0:return 10;//待确认		case 1:return 20;//待发货		case 2:return 25;//待兑换		case 3:return 30;//待收货		case 5:return 50;//已评价		default:			return 10;//待确认		}	}    //发货	@Override	public void changeStatus(HttpServletRequest request, Integer status) {		boolean isDuihuan=false;		if(status==2){			status = getOrderStatus(status)+15;			isDuihuan=true;		}else{			status = getOrderStatus(status)+10;		}				Integer id = Integer.parseInt(request.getParameter("id"));		QueryModel model = new QueryModel();		model.clearQuery();		model.combPreEquals("id", id);		ReGoodsorder reGoodsorder = (ReGoodsorder) dateBaseDao.findOne(ReGoodsorder.class, model);		reGoodsorder.setStatus(status);			reGoodsorderItemDAO.updateStatusByParent(status, id);				if(status==30){			String logisticsCompay = request.getParameter("logisticsCompay");			String logisticsCode = request.getParameter("logisticsCode");			reGoodsorder.setLogisticsCompay(logisticsCompay);			reGoodsorder.setLogisticsCode(logisticsCode);			reGoodsorder.setConfirmtime(new java.sql.Timestamp(getDateAfter(new Date(),7).getTime()));						List<Users> users=new ArrayList<Users>();			users.add(reGoodsorder.getUser());			/*userSystemMessageService.saveMessage("您好，您于"+reGoodsorder.getCreateTime()+"时间定的货物，订单号"					+reGoodsorder.getOrderCode()+"，经"+logisticsCompay+",快递已发出，敬请查收，希望您满意，谢谢。",StringUtil.MESSAGE_DINGDAN, "订单已发货", users, id.toString(), 0d,1);*/			userSystemMessageService.saveMessage("您好，您于"+reGoodsorder.getCreateTime()+"时间定的货物，订单号"+reGoodsorder.getOrderCode()+"，经"+logisticsCompay+"快递已发出，敬请查收，希望您满意，谢谢。",StringUtil.MESSAGE_DINGDAN, "订单已发货", users, id.toString(), 0d,1);		}				if(isDuihuan){			comfirmMoney(reGoodsorder);		}			}		public String comfirmMoney(ReGoodsorder order){		QueryModel queryModel = new QueryModel();		if(!order.getIsHasItems()){			return "-8";		}else{			queryModel.clearQuery();			queryModel.combPreEquals("order.id",order.getId(),"orderId");			List<ReGoodsorderItem> itemList = dateBaseDao.findLists(ReGoodsorderItem.class, queryModel);			for(ReGoodsorderItem item : itemList){				if(item.getIsBack()==20 || item.getIsBack()==30 || item.getIsBack()==50 ){					return "-9";				}													queryModel.clearQuery();					queryModel.combPreEquals("relateId", item.getId());					queryModel.combPreEquals("type", -1);					List<CashmoneyRecord> moneyList =dateBaseDao.findPageList(CashmoneyRecord.class, queryModel,0,Integer.MAX_VALUE);					if(moneyList.size()>0){						for(CashmoneyRecord cr :moneyList){						cr.setRelateName(cr.getRelateName()+new java.sql.Timestamp(new Date().getTime())+"确认兑换");						cr.setIsValid(true);						cr.setType(1);						Users user  =usersDAO.findById(cr.getUsersByUserId().getId());						double money =0d;						if(user.getMoney()!=null){							money=user.getMoney();						}												//-===============ZL=================================//						double a = CalcUtil.add(money, cr.getMoney(), 2);						user.setMoney(a);						//user.setMoney(money+cr.getMoney());												cashmoneyRecordDao.update(cr);						usersDAO.update(user);						}					}										queryModel.clearQuery();					queryModel.combPreEquals("orderItem.id", item.getId(),"orderItemId");					queryModel.combPreEquals("type", -1);					List<AdminuserCashpointRecord> adminList =dateBaseDao.findPageList(AdminuserCashpointRecord.class, queryModel,0,Integer.MAX_VALUE);					if(adminList.size()>0){						for(AdminuserCashpointRecord cr:adminList){						cr.setRemark(cr.getRemark()+""+DateUtil.formatDate("yyyy-MM-dd-HH-mm-ss", new Date())+"确认兑换！");						AdminUser au = adminUserDAO.findById(cr.getAdminUser().getId());						//au.setMoney(au.getMoney()==null?0d:au.getMoney()+cr.getCashpoint());						double money =au.getMoney()==null?0d:au.getMoney();						au.setMoney(CalcUtil.add(money, cr.getCashpoint(), 2));						cr.setType(1);						adminuserCashpointRecordDAO.update(cr);						adminUserDAO.update(au);						}					}				}											}								order.setStatus(ReGoodsorder.dai_ping_jia);						reGoodsorderItemDAO.updateStatusByParent(ReGoodsorder.dai_ping_jia, order.getId());				return "1";			}		 public  Date getDateAfter(Date d, int day) {   	        Calendar now = Calendar.getInstance();  	        now.setTime(d);   	        now.set(Calendar.DATE, now.get(Calendar.DATE) + day);   	        return now.getTime();   	  }	@Override	public void updateComment(OrderComment orderComment) {				commentDAO.merge(orderComment);	}	@Override	public void getItemById(HttpServletRequest request) {		String status = request.getParameter("status");		Integer itemId = Integer.parseInt(request.getParameter("itemId"));		String orderId = request.getParameter("orderId");		Map<String,Object> itemMap = new HashMap<>();		QueryModel queryModel = new QueryModel();		queryModel.clearQuery();		queryModel.combPreEquals("id", itemId);		ReGoodsorderItem item = (ReGoodsorderItem) dateBaseDao.findOne(ReGoodsorderItem.class, queryModel);		itemMap.put("item", item);		queryModel.clearQuery();		queryModel.combPreEquals("reGoodsorderItem.id", item.getId(),"itemId");		OrderComment orderComment = (OrderComment) dateBaseDao.findOne(OrderComment.class, queryModel);		itemMap.put("comment", orderComment);		request.setAttribute("itemMap", itemMap);		queryModel.clearQuery();		queryModel.combPreEquals("id", Integer.parseInt(orderId));		ReGoodsorder order = (ReGoodsorder) dateBaseDao.findOne(ReGoodsorder.class, queryModel);		Map<String,Object> orderMap = new HashMap<>();		orderMap.put("order", order);		request.setAttribute("orderMap", orderMap);			}	@Override	public void changeOrder() {		// TODO Auto-generated method stub				QueryModel model = new QueryModel();		model.clearQuery();		model.combPreEquals("status", 30);		model.combPreCompare("confirmtime",new java.sql.Time(new Date().getTime()),model.LESS);		model.combPreEquals("isHasItems", true);				try{		List<ReGoodsorder> olist =   (List<ReGoodsorder>) dateBaseDao.findList(ReGoodsorder.class, model);				for(ReGoodsorder order:olist){			model.clearQuery();			model.combPreEquals("status", 30);			model.combPreEquals("isBack", 10);			model.combPreEquals("order.id", order.getId(),"orderId");			order.setStatus(40);//改变订单；															List<ReGoodsorderItem> rgilist = (List<ReGoodsorderItem>) dateBaseDao.findLists(ReGoodsorderItem.class, model);			if(rgilist.size()>0){				for(ReGoodsorderItem rgi:rgilist){					rgi.setStatus(ReGoodsorder.dai_ping_jia);					//商家店铺										if(rgi.getMallClass().equals(ReBaseGoods.ScoreMall)){						ReGoodsOfScoreMall scoreMall = reGoodsOfScoreMallDAO.findById(rgi.getMallId());						AdminUser adminUser = scoreMall.getSnapshotGoods().getSeller().getAdminUser();						AdminUserScoreRecord scoreRecord=new AdminUserScoreRecord();						scoreRecord.setAdminUser(adminUser);						scoreRecord.setBeforeScore(adminUser.getScore());						scoreRecord.setAfterScore(adminUser.getScore()+rgi.getPayScore());						scoreRecord.setScore(rgi.getPayScore());						scoreRecord.setSurplusScore(rgi.getPayScore());						scoreRecord.setType(AdminUserScoreRecord.VENDITION);						String  msg="销售产品"+rgi.getGoodName()+" 获得积分,用户支付积分"+rgi.getPayScore()+"（订单自动确认）";						scoreRecord.setRemark(msg);						scoreRecord.setCreateTime(new Timestamp(System.currentTimeMillis()));						scoreRecord.setIsValid(true);						adminUserScoreRecordDAO.save(scoreRecord);						Integer sc = adminUser.getScore()==null?0:adminUser.getScore();						adminUser.setScore(sc+rgi.getPayScore());						adminUserDAO.update(adminUser);						//continue;					}																				String goodsname ="";					model.clearQuery();					//model.combPreEquals("orderItem.id", rgi.getId());					model.combPreEquals("orderItem.id", rgi.getId(),"orderItemid");					model.combPreEquals("type", -1);					model.combPreEquals("isValid", true);					List<AdminuserCashpointRecord> adminList =dateBaseDao.findPageList(AdminuserCashpointRecord.class, model,0,Integer.MAX_VALUE);					if(adminList.size()>0){						for(AdminuserCashpointRecord cr:adminList){								goodsname=cr.getOrderItem().getGoodName();								String un ="";								if(cr.getUsers()!=null ){									un= cr.getUsers().getName();								}								cr.setRemark("粉丝"+un+"购买商品"+goodsname+"确认收货!(自动收货):收货时间"+DateUtil.formatDate("yyyy-MM-dd-HH:mm:ss", new Date()));								AdminUser au = adminUserDAO.findById(cr.getAdminUser().getId());								double money =au.getMoney()==null?0d:au.getMoney();								au.setMoney(CalcUtil.add(money, cr.getCashpoint(), 2));								cr.setType(1);								adminuserCashpointRecordDAO.update(cr);								adminUserDAO.update(au);						}					}					model.clearQuery();					model.combPreEquals("relateId", rgi.getId());					model.combPreEquals("type", -1);					model.combPreEquals("isValid", true);					List<CashmoneyRecord> moneyList =dateBaseDao.findPageList(CashmoneyRecord.class, model,0,Integer.MAX_VALUE);					if(moneyList.size()>0){						for(CashmoneyRecord cr :moneyList){						cr.setRelateName("粉丝"+cr.getUsersByFromUsers().getRealname()+"购买商品"+goodsname+"确认收货!");						cr.setIsValid(true);						cr.setType(1);						Users user  = cr.getUsersByUserId();												double money =user.getMoney()==null?0d:user.getMoney();												user.setMoney(CalcUtil.add(money, cr.getMoney()));												cashmoneyRecordDao.update(cr);						usersDAO.update(user);						}					}														}							}					}				}catch(Exception e){			e.printStackTrace();        	TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();		}					}	@Override	public Integer countByStatus(Integer adminUserId,HttpServletRequest request, Integer status) {		QueryModel queryModel = new QueryModel();		queryModel.combPreEquals("status", status);		queryModel.combEquals("isValid", 1);		queryModel.combPreEquals("isHasItems", true);		queryModel.combCondition(" (seller.id <> 4482 and  seller.id <> 4934  and seller.id <> 4617 and seller.id<> 4869)");				return dateBaseDao.findCount(ReGoodsorder.class, queryModel);	}	@Override	public void  getOrderSales(HttpServletRequest request, String mallType,Integer currentPage,Integer pageSize,String sTM,String eTM) {				StringBuffer str = new StringBuffer();		if(mallType.indexOf(",")!=-1){			String[] temp = mallType.split(",");			for (String uuid : temp) {				str.append(",'" + uuid.trim() + "'");			}			if (str.length() > 0)				mallType = str.toString().replaceFirst(",", "");		}else{			str.append("'" + mallType.trim() + "'");			mallType=str.toString();		}						PageResult<ReGoodsorderItem> relist = goodsorderDAO.getOrderSales( request,  mallType, currentPage, pageSize,sTM,eTM);		request.setAttribute("pageResult", relist);		request.setAttribute("sTM", sTM);		request.setAttribute("eTM", eTM);	}	@Override	public void editSalesVolume(HttpServletRequest request, HttpServletResponse response, String type,			String sellerName) {		if (StringUtils.isNotBlank(type)) {			if (type.equals("0")) {				List<ReGoodsOfSellerMall>  list = goodsorderDAO.getSellerList(request, response);				request.setAttribute("list", list);			}else if(type.equals("1")){				List<ReGoodsOfLocalSpecialtyMall> list = goodsorderDAO.getLocalList(request, response);				request.setAttribute("list", list);			}else if(type.equals("2")){				List<ReGoodsOfSeckillMall> list = goodsorderDAO.getSeckillList(request, response);				request.setAttribute("list", list);			}else if(type.equals("3")){				List<ReGoodsOfScoreMall> list = goodsorderDAO.getScoreList(request, response);				request.setAttribute("list", list);				}		}		request.setAttribute("sellerName", sellerName);		request.setAttribute("type", type);			    	}	@Override	public void saveSalesVolume(HttpServletRequest request, HttpServletResponse response, String[] ids,String type) {		Map<String, String> map = new HashMap<String, String>();		for (int i = 0; i < ids.length; i++) {			String[] temp =ids[i].split(",");			if(temp.length>1){				map.put(temp[0], temp[1]);				if (type.equals("0")) {					ReGoodsOfSellerMall sellerMall =reGoodsOfSellerMallDAO.findById(Integer.parseInt(temp[0]));					sellerMall.setSalesVolume(Integer.parseInt(temp[1]));					reGoodsOfSellerMallDAO.saveOrUpdate(sellerMall);				}else if(type.equals("1")){					ReGoodsOfLocalSpecialtyMall specialtyMall = reGoodsOfLocalSpecialtyMallDAO.findById(Integer.parseInt(temp[0]));					specialtyMall.setSalesVolume(Integer.parseInt(temp[1]));					reGoodsOfLocalSpecialtyMallDAO.saveOrUpdate(specialtyMall);				}else if(type.equals("2")){					ReGoodsOfSeckillMall reSeckillMall = reGoodsOfSeckillMallDAO.findById(Integer.parseInt(temp[0]));					reSeckillMall.setSalesVolume(Integer.parseInt(temp[1]));					reGoodsOfSeckillMallDAO.saveOrUpdate(reSeckillMall);				}else if(type.equals("3")){					ReGoodsOfScoreMall scoreMall = reGoodsOfScoreMallDAO.findById(Integer.parseInt(temp[0]));					scoreMall.setSalesVolume(Integer.parseInt(temp[1]));					reGoodsOfScoreMallDAO.saveOrUpdate(scoreMall);				}											}		}	}		@Override	public Map<String, Object> zhiding(HttpServletRequest request,		HttpServletResponse response) {	 	String id = request.getParameter("id");;	 	Seller seller = sellerDAO.findById(Integer.valueOf(id));	 	seller.setZhidingTime(new Timestamp(System.currentTimeMillis()));	 	sellerDAO.saveOrUpdate(seller);        Map<String, Object> map = new HashMap<String, Object>();        map.put("status", true);        return map;			}		@Override	public PageResult<ReGoodsorderItem> getItemList(HttpServletRequest request, Integer currentPage,String typeId) {		String pagestr = request.getParameter("page");//页码						return reGoodsorderItemDAO.getGoodsForList(currentPage, pageSize,typeId);	}		@Override	public PageResult<ReGoodsorder> getOrderList(HttpServletRequest request,			Integer currentPage, String typeId) {		// TODO Auto-generated method stub		return reGoodsorderDAO.getLockUser(currentPage,pageSize,typeId);	}		@Override	public void excelPortList(HttpServletRequest request,			HttpServletResponse response, String typeId) {		String pagestr = request.getParameter("page");		PageInfo pageInfo = new PageInfo();		StringBuffer sb = new StringBuffer();		int count = 0;				String str = "typeId="+typeId;		pageInfo.setParam(str+"&page=");		Utility.setPageInfomation(pageInfo, pagestr, pageSize+"", count);		int start = pageInfo.getCurrentPage() * pageInfo.getPageSize();		int end = pageInfo.getPageSize();		if(StringUtils.isNotBlank(typeId)){			//excel文件表头			List<String> titleList = new ArrayList<String>();			titleList.add("序号");			titleList.add("中奖时间");	        titleList.add("用户名称");	        titleList.add("用户手机号");	        titleList.add("用户地址");	        titleList.add("订单状态");	        titleList.add("中奖类型");	        titleList.add("归属商家");	        titleList.add("商品名称");	        //excel 文件数据内容	        List<Object[]> value = new ArrayList<Object[]>();	        SimpleDateFormat sdf = new SimpleDateFormat("yyy-MM-dd HH:mm:ss");	        String fileName = "中奖用户";	        QueryModel model = new QueryModel();        	model.clearQuery();        	model.combPreEquals("isValid", true);        	model.combCondition("status > 10" );        	if(StringUtils.isNotBlank(typeId) && typeId.equals("3")) {        		model.combPreEquals("gameType.id", 265,"gameType");        		model.combPreEquals("isLock", 1);        		fileName = "积分夺宝中奖用户信息"+System.currentTimeMillis();        	}else if(StringUtils.isNotBlank(typeId) && typeId.equals("4")){        		model.combPreEquals("isGame", 1);        		model.combPreEquals("gameType.id", 266,"gameType");        		fileName = "幸运抽奖中奖用户信息"+System.currentTimeMillis();        	}        	        	List<ReGoodsorderItem> items = dateBaseDao.findPageList(ReGoodsorderItem.class, model,start,end);        	if(items.size()>0){        		for(ReGoodsorderItem item :items){        			String[] temp = new String[9];        			temp[0] = String.valueOf(item.getId());        			temp[1] = sdf.format(item.getCreateTime());        			temp[2] = item.getUser().getRealname();        			temp[3] = item.getUser().getPhone();        			temp[4] = item.getUser().getAddress();        			temp[5] = String.valueOf(item.getStatus());        			temp[6] = item.getGameType().getName();        			temp[7] = item.getOrder().getSeller().getName();        			temp[8] = item.getGoodName();        			value.add(temp);        		}        	}	        int[] dataType = new int[15];	        ExcelUtil.ExportFile(ExcelUtil.getWorkBook(), titleList, value, response, fileName, dataType, false, null);				}							}}