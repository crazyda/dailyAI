package com.axp.service.money.impl;import java.util.List;import java.util.Map;import com.axp.model.SellerMoneyRecord;import org.springframework.stereotype.Service;import com.axp.dao.ISellerMoneyRecordDao;import com.axp.model.AdminUser;import com.axp.model.ReSellerWithdrawRecord;import com.axp.model.Seller;import com.axp.query.PageResult;import com.axp.service.money.ReSellerWithdrawRecordService;import com.axp.service.system.impl.BaseServiceImpl;import com.axp.util.CalcUtil;import com.axp.util.StringUtil;@Servicepublic class ReSellerWithdrawRecordServiceImpl extends BaseServiceImpl implements ReSellerWithdrawRecordService {    @Override    public PageResult<ReSellerWithdrawRecord> getRecordList(Integer currentPage, Integer pageSize, List<AdminUser> adminUsers) {        return reSellerWithdrawRecordDAO.getRecordList(currentPage, pageSize, adminUsers);    }    @Override    public Map<String, Object> addWithdraw(ReSellerWithdrawRecord withdraw, Map<String, Object> returnMap) {        reSellerWithdrawRecordDAO.save(withdraw);        returnMap.put("success", true);        returnMap.put("message", "申请提现成功；");        return returnMap;    }    @Override    public ReSellerWithdrawRecord findById(Integer recordId) {        return reSellerWithdrawRecordDAO.findById(recordId);    }    @Override    public Map<String, Object> doCheck(Integer recordId, Integer pass, String message, Map<String, Object> returnMap) {        ReSellerWithdrawRecord reSellerWithdrawRecord = reSellerWithdrawRecordDAO.findById(recordId);        if (reSellerWithdrawRecord == null) {            returnMap.put("message", "没有id值为" + recordId + "的对象；");        }        /**         * 审核不通过：         * 1，需要将商家已经扣除的钱补上；         * 2，更改商家提现记录的状态为审核不通过；         * 3，将尚未确定的sellerMoneyRecorc表中的记录删除掉；         */        if (pass == null || pass == 0) {            //更改商家提现记录状态；            reSellerWithdrawRecord.setStatus(ReSellerWithdrawRecord.shen_he_bu_tong_guo);            //当审核不通过的时候，需要把提现时就扣除的金额归还给对应的商家；            Seller seller = reSellerWithdrawRecord.getSeller();//商家；            Double money = reSellerWithdrawRecord.getMoney();//需要补上的钱；            Double balance = CalcUtil.add(seller.getMoney(), money); // 商家最终余额            seller.setMoney(balance);//更改商家余额；            //删除sellerMoneyRecord表中的提现记录（因为该表中的有效数据和要等于商家余额）；            SellerMoneyRecord sellerMoneyRecord1 = sellerMoneyRecordDao.getSellerMoneyRecordBySellerWithdrawRecordIdAndType(recordId, ISellerMoneyRecordDao.CASH);            if(sellerMoneyRecord1!=null){            	sellerMoneyRecord1.setIsValid(false);            	SellerMoneyRecord sellerMoneyRecord2 = sellerMoneyRecordDao.getSellerMoneyRecordBySellerWithdrawRecordIdAndType(recordId, ISellerMoneyRecordDao.SHOUXUFEI);            	if(sellerMoneyRecord2!=null){            		sellerMoneyRecord2.setIsValid(false);            	}            }        }        /**         * 审核通过：         * 1，更改商家提现记录表中的数据状态为审核通过；         * 2，将sellerMoneyRecord表中对应的记录状态更改为已确认；         */        else if (pass == 1) {            //更改商家提现记录的状态；            reSellerWithdrawRecord.setStatus(ReSellerWithdrawRecord.shen_he_tong_guo);            //更改sellerMoneyRecord表中的对应数据状态；            SellerMoneyRecord sellerMoneyRecord1 = sellerMoneyRecordDao.getSellerMoneyRecordBySellerWithdrawRecordIdAndType(recordId, ISellerMoneyRecordDao.CASH);            if(sellerMoneyRecord1!=null){            	sellerMoneyRecord1.setIsConfirmed(true);            	SellerMoneyRecord sellerMoneyRecord2 = sellerMoneyRecordDao.getSellerMoneyRecordBySellerWithdrawRecordIdAndType(recordId, ISellerMoneyRecordDao.SHOUXUFEI);            	if(sellerMoneyRecord2!=null){//之前的提现数据不存在手续费，需要排除；            		sellerMoneyRecord2.setIsConfirmed(true);            	}            }        }        reSellerWithdrawRecord.setCheckMessage(message);        returnMap.put("message", "审核成功；");        return returnMap;    }    @Override    public PageResult<ReSellerWithdrawRecord> getCheckedRecord(Integer currentPage, Integer pageSize) {        return reSellerWithdrawRecordDAO.getCheckedRecord(currentPage, pageSize);    }    @Override    public Map<String, Object> doPay(Integer recordId, Map<String, Object> returnMap) {        ReSellerWithdrawRecord reSellerWithdrawRecord = reSellerWithdrawRecordDAO.findById(recordId);        if (reSellerWithdrawRecord == null) {            returnMap.put("message", "没有id值为" + recordId + "的申请；");        }        reSellerWithdrawRecord.setStatus(ReSellerWithdrawRecord.ti_xian_wan_cheng);        returnMap.put("message", "操作完成");        return returnMap;    }    @Override    public Map<String, Object> doRequestWithdraw(AdminUser adminUser, Seller seller, Map<String, Object> returnMap) {        //持久化对象；        adminUser = adminUserDAO.findById(adminUser.getId());        seller = sellerDAO.findById(seller.getId());        //判断是否有商家；        if (seller == null) {            returnMap.put("success", false);            returnMap.put("message", "没有绑定商家的后台用户，无法进行提现操作");            return returnMap;        }        //判断商家电话；        String phone = adminUser.getPhone();        if (StringUtil.isEmpty(phone) || phone.length() != 11) {            returnMap.put("success", true);            returnMap.put("message", "您尚未绑定手机号，需要先绑定手机号；");            returnMap.put("url", "changePhone/changePhonePage");            seller.setWithdrawStatus(Seller.未确认手机);//更改一下提现状态；            return returnMap;        } else {            returnMap.put("success", true);            returnMap.put("message", "操作前，需要先验证手机号");            returnMap.put("url", "changePhone/confirmPhoneBeforeSellerWithdraw");            return returnMap;        }    }    @Override    public Map<String, Object> doRequestWithdraw2(AdminUser adminUser, Seller seller, Map<String, Object> returnMap) {        //持久化对象；        adminUser = adminUserDAO.findById(adminUser.getId());        seller = sellerDAO.findById(seller.getId());        //判断是否有商家；        if (adminUser == null || seller == null) {            returnMap.put("success", false);            returnMap.put("message", "没有绑定商家的后台用户，无法进行提现操作");            return returnMap;        }        //判断商家是否填写了商家体现信息；        Integer sellerWithdrawStatus = seller.getWithdrawStatus() == null ? 2 : seller.getWithdrawStatus();        if (sellerWithdrawStatus == Seller.提现资料审核中) {            returnMap.put("success", false);            returnMap.put("message", "您的提现资料正在审核中，请耐心等待");            return returnMap;        } else if (sellerWithdrawStatus == Seller.提现资料审核不通过) {            returnMap.put("success", true);            returnMap.put("message", "您的提现资料审核不通过，需要重新填写");            returnMap.put("url", "withdrawData/withdrawDataPage");            return returnMap;        } else if (sellerWithdrawStatus == Seller.未填写提现资料) {            returnMap.put("success", true);            returnMap.put("message", "您尚未填写商家提现资料，需要去完善");            returnMap.put("url", "withdrawData/withdrawDataPage");            return returnMap;        } else if (sellerWithdrawStatus == Seller.提现资料审核通过) {            returnMap.put("success", true);            returnMap.put("message", "验证完成，准备进入提现页面");            returnMap.put("url", "sellerWithdraw/requestWithdraw3");            return returnMap;        }        returnMap.put("success", false);        returnMap.put("message", "跳转出错");        return returnMap;    }}