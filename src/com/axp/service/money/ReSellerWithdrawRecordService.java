package com.axp.service.money;import java.util.List;import java.util.Map;import com.axp.model.AdminUser;import com.axp.model.ReSellerWithdrawRecord;import com.axp.model.Seller;import com.axp.query.PageResult;import org.logicalcobwebs.proxool.admin.Admin;public interface ReSellerWithdrawRecordService {    /**     * 获取商家兑换记录列表数据；     *     * @param currentPage 当前页；     * @param pageSize    每页条数；     * @param adminUsers  要查询哪些人的提现记录；     * @return     */    PageResult<ReSellerWithdrawRecord> getRecordList(Integer currentPage, Integer pageSize, List<AdminUser> adminUsers);    /**     * 增加提现申请；     *     * @param withdraw     * @param returnMap @return     */    Map<String, Object> addWithdraw(ReSellerWithdrawRecord withdraw, Map<String, Object> returnMap);    /**     * 根据id寻找对象；     *     * @param recordId id值；     * @return     */    ReSellerWithdrawRecord findById(Integer recordId);    /**     * 商家提现信息审核操作；     *     * @param recordId  提现信息对象id值；     * @param pass      是否通过审核；     * @param message   审核信息；     * @param returnMap 返回值；  @return     */    Map<String, Object> doCheck(Integer recordId, Integer pass, String message, Map<String, Object> returnMap);    /**     * 获取所有通过审核的商家提现记录；     *     * @return     */    PageResult<ReSellerWithdrawRecord> getCheckedRecord(Integer currentPage, Integer pageSize);    /**     * 对通过审核的商家提现申请，进行支付操作；     *     * @param recordId  商家提现申请的id值；     * @param returnMap 返回值；     * @return     */    Map<String, Object> doPay(Integer recordId, Map<String, Object> returnMap);    /**     * 根据后台用户现有的状态，在前台请求申请提现时，给出什么样的信息回去；     * <p>     * 1，如果后台用户的phone字段没有值，那么需要给出提示，确认后跳转到新增手机号界面；     * 2，如果有了手机号，但是没有填写提现信息，需要给出提示，确认后跳转到填写提现信息界面；     * 3，如果都有了，那么就跳转到确认手机界面，每次提现，都需要进行手机验证；     *     * @param seller     * @param returnMap     * @return     */    Map<String, Object> doRequestWithdraw(AdminUser adminUser, Seller seller, Map<String, Object> returnMap);    /**     * 提现时的第二次请求     * 说明：第一次的请求目的在于让没有绑定手机号的商家绑定手机号，绑定手机号的验证手机号；     * 第二次的请求，在于根据用户的状态进行跳转判断；     *     * @param adminUser     * @param seller     * @param returnMap     * @return     */    Map<String, Object> doRequestWithdraw2(AdminUser adminUser, Seller seller, Map<String, Object> returnMap);}