package com.axp.service.goods.impl;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.apache.commons.lang.StringUtils;import org.springframework.stereotype.Service;import com.axp.model.ReBaseGoods;import com.axp.model.ReBaseGoods.MallParamter;import com.axp.model.ReGoodsOfBase;import com.axp.model.ReGoodsOfBaseEditRecord;import com.axp.model.ReGoodsOfScoreMall;import com.axp.model.ReGoodsOfSellerMall;import com.axp.query.PageResult;import com.axp.service.goods.ReGoodsOfScoreMallService;import com.axp.service.system.impl.BaseServiceImpl;import com.axp.util.DateUtil;import com.axp.util.StringUtil;@Servicepublic class ReGoodsOfScoreMallServiceImpl extends BaseServiceImpl implements ReGoodsOfScoreMallService {    @Override    public void doSave(ReBaseGoods.MallParamter mallParamter) throws Exception {        //确保基础商品为持久化对象；        ReGoodsOfBase goods = reGoodsOfBaseDAO.findById(mallParamter.getBaseGoods().getId());        //判断是第一次投放，还是编辑投放操作；        ReGoodsOfScoreMall g;        String goodsOrder = mallParamter.getGoodsOrder();        if (StringUtil.hasLength(goodsOrder) && goodsOrder.startsWith(ReBaseGoods.ScoreMall)) {            g = (ReGoodsOfScoreMall) reBaseGoodsDAO.getMallObjByGoodsOrder(goodsOrder);        } else {            List<ReGoodsOfScoreMall> list = reGoodsOfScoreMallDAO.getGoodsByBaseGoodsId(goods.getId());            if (list == null || list.size() == 0) {                g = new ReGoodsOfScoreMall();            } else if (list.size() == 1) {                g = list.get(0);            } else {                throw new Exception("数据库数据错误：在积分商城中，相同的基础商品出现了多条记录，基础商品id值为：" + goods.getId());            }        }        //保存商城操作；        reGoodsOfScoreMallDAO.save(g);//为了获取id值，必须做两次保存；        g.setBaseGoodsId(goods.getId());        g.setSnapshotGoods(mallParamter.getSnapshotGoods());        g.setStandardDetails(mallParamter.getStandardDetails());        g.setCreateTime(new Timestamp(System.currentTimeMillis()));        g.setDisplayPrice(mallParamter.getDisplayPrice());        g.setPrice(mallParamter.getPrice());        g.setScore(mallParamter.getScore());        g.setTransportationType(mallParamter.getTransportationType());        g.setTransportationPrice(mallParamter.getTransportationPrice());        g.setAddedTime(mallParamter.getAddedTime());        g.setShelvesTime(mallParamter.getShelvesTime());        g.setGoodsOrder(ReBaseGoods.ScoreMall + g.getId());        g.setCommentCount(0);                List<ReGoodsOfBaseEditRecord> editRecordList = reGoodsOfBaseEditRecordDao.findByProperty("reGoodsOfBase.id",goods.getId());        //重新上架 销量不清零        if(editRecordList.size()>0){        	g.setSalesVolume(editRecordList.get(0).getScoreMallSalesVolume());        }else{        	g.setSalesVolume(0);        }        g.setIsChecked(false);        if (mallParamter.getIsNoStandard()) {//如果用户勾选了无商品规格，这三个值才有意义；            g.setIsNoStandard(true);            g.setNoStandardScore(mallParamter.getNoStandardScore());            g.setNoStandardRepertory(mallParamter.getNoStandardRepertory());            g.setScore(mallParamter.getNoStandardScore());        } else {            g.setIsNoStandard(false);        }        //以下为商城特有字段赋值；        g.setCountLimit(mallParamter.getCountLimit());        g.setExchangeArea(mallParamter.getExchangeArea());        g.setDesc(mallParamter.getDesc());    }        @Override	public void doSavePut(HttpServletRequest request) throws Exception {		String stock = request.getParameter("stock");		String score = request.getParameter("score");		String startedTime = request.getParameter("startedTime");		String endTime = request.getParameter("endTime");		String goodsOrder = request.getParameter("goodsOrder");		String purchaseNum = request.getParameter("purchaseNum");				ReGoodsOfScoreMall goodsOfScoreMall = null;		ReGoodsOfSellerMall goodsOfSellerMall =  null;		String str = goodsOrder.substring(0,3);//商品id前缀		if (!str.equals("sem")) {			String goodsId = goodsOrder.substring(3,goodsOrder.length());			goodsOfScoreMall = reGoodsOfScoreMallDAO.findById(Integer.parseInt(goodsId));			goodsOfSellerMall = goodsOfScoreMall.getReGoodsOfSellerMall();		}else{			String sellerMallId=goodsOrder.substring(3,goodsOrder.length());//周边店铺数据id			goodsOfScoreMall = new ReGoodsOfScoreMall();			goodsOfSellerMall = reGoodsOfSellerMallDAO.findById(Integer.parseInt(sellerMallId));		}				if (goodsOfSellerMall!=null) {			if (StringUtils.isNotBlank(purchaseNum)) {				goodsOfScoreMall.setCountLimit(Integer.parseInt(purchaseNum));			}						goodsOfScoreMall.setScore(Integer.parseInt(score));			goodsOfScoreMall.setNoStandardScore(Integer.parseInt(score));			goodsOfScoreMall.setBaseGoodsId(goodsOfSellerMall.getBaseGoodsId());			goodsOfScoreMall.setIsValid(true);			goodsOfScoreMall.setCreateTime(new java.sql.Timestamp(System.currentTimeMillis()));			goodsOfScoreMall.setReGoodsOfSellerMall(goodsOfSellerMall);			goodsOfScoreMall.setDisplayPrice(goodsOfSellerMall.getDisplayPrice());						goodsOfScoreMall.setTransportationType(goodsOfSellerMall.getTransportationType());			goodsOfScoreMall.setTransportationPrice(goodsOfSellerMall.getTransportationPrice());			SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");			Date d = sf.parse(startedTime);			Date d2 = sf.parse(endTime);			goodsOfScoreMall.setAddedTime(new Timestamp(d.getTime()));			goodsOfScoreMall.setShelvesTime(new Timestamp(d2.getTime()));			goodsOfScoreMall.setReleaseNum(Integer.parseInt(stock));			goodsOfScoreMall.setIsNoStandard(goodsOfSellerMall.getIsNoStandard());			goodsOfScoreMall.setNoStandardPrice(goodsOfSellerMall.getNoStandardPrice());			goodsOfScoreMall.setNoStandardRepertory(goodsOfSellerMall.getNoStandardRepertory());			goodsOfScoreMall.setDefaultRepertory(goodsOfSellerMall.getDefaultRepertory());			goodsOfScoreMall.setRightsProtect(goodsOfSellerMall.getRightsProtect());			goodsOfScoreMall.setStandardDetails(goodsOfSellerMall.getStandardDetails());			goodsOfScoreMall.setSnapshotGoods(goodsOfSellerMall.getSnapshotGoods());			goodsOfScoreMall.setIsChecked(false);			goodsOfScoreMall.setIsNotChange(true);			reGoodsOfScoreMallDAO.saveOrUpdate(goodsOfScoreMall);									goodsOfScoreMall.setGoodsOrder(ReBaseGoods.ScoreMall+goodsOfScoreMall.getId());			reGoodsOfScoreMallDAO.update(goodsOfScoreMall);									ReGoodsOfBase baseGoods = reGoodsOfBaseDAO.findById(goodsOfSellerMall.getBaseGoodsId());			 			try {				String changeLaunchMall = baseGoods.changeLaunchMall(baseGoods.getLaunchMall()==null?"00000000":baseGoods.getLaunchMall(), 2, true);				baseGoods.setLaunchMall(changeLaunchMall);				reGoodsOfBaseDAO.update(baseGoods);			} catch (Exception e) {				e.printStackTrace();			}						}    }    @Override    public PageResult<ReGoodsOfScoreMall> getCheckPageresult(Integer currentPage, Integer pageSize,Integer adminUserId) {        return reGoodsOfScoreMallDAO.getCheckPageresult(currentPage, pageSize,adminUserId);    }    @Override    public ReGoodsOfScoreMall get(Integer checkGoodsId) {        return reGoodsOfScoreMallDAO.findById(checkGoodsId);    }    @Override    public Map<String, Object> doCheck(Map<String, Object> returnMamp, Boolean isPass, String checkDesc, Integer goodsId) throws Exception {        ReGoodsOfScoreMall reGoodsOfScoreMall = reGoodsOfScoreMallDAO.findById(goodsId);        if (isPass) {            reGoodsOfScoreMall.setIsChecked(true);            Date date=DateUtil.addDay2Date(180, new Date());            reGoodsOfScoreMall.setShelvesTime(new Timestamp(date.getTime()));        } else {            //审核不通过（1，将isChecked设置为null，null表示审核不通过；2，此商品商家不成功，需要更改launchMall字段的值）            reGoodsOfScoreMall.setIsChecked(null);            Integer baseGoodsId = reGoodsOfScoreMall.getBaseGoodsId();            ReGoodsOfBase baseGoods = reGoodsOfBaseDAO.findById(baseGoodsId);            String s = baseGoods.changeLaunchMall(baseGoods.getLaunchMall(), ReGoodsOfBase.scoreMall, false);            baseGoods.setLaunchMall(s);        }        reGoodsOfScoreMall.setCheckDesc(checkDesc);        //返回返回值；        returnMamp.put("success", true);        returnMamp.put("message", "操作完成；");        return returnMamp;    }	@Override	public PageResult<ReGoodsOfBase> getZhiDingGoods(Integer currentPage,			Integer pageSize, Integer valueOf, String search) {				PageResult result;//返回值；        //根据首页不同的分类 进行置顶       result = reGoodsOfScoreMallDAO.getGoodsList(valueOf,currentPage, pageSize, search);        return result;	}	}