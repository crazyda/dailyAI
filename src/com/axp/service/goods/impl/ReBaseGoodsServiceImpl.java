package com.axp.service.goods.impl;import java.util.ArrayList;import java.util.List;import java.util.Map;import javax.annotation.Resource;import javax.servlet.http.HttpServletRequest;import org.springframework.stereotype.Service;import org.springframework.transaction.interceptor.TransactionAspectSupport;import com.alibaba.fastjson.JSONObject;import com.axp.dao.ICommodityTypeDao;import com.axp.dao.impl.CommodityTypeDaoImpl;import com.axp.model.CommodityType;import com.axp.model.ReBaseGoods;import com.axp.model.ReGoodsOfBase;import com.axp.model.ReGoodsOfBaseEditRecord;import com.axp.model.ReGoodsOfChangeMall;import com.axp.model.ReGoodsOfLocalSpecialtyMall;import com.axp.model.ReGoodsOfLockMall;import com.axp.model.ReGoodsOfMemberMall;import com.axp.model.ReGoodsOfNineNineMall;import com.axp.model.ReGoodsOfScoreMall;import com.axp.model.ReGoodsOfSeckillMall;import com.axp.model.ReGoodsOfSellerMall;import com.axp.service.goods.ReBaseGoodsService;import com.axp.service.system.impl.BaseServiceImpl;import com.axp.util.CalcUtil;import com.axp.util.StringUtil;@Servicepublic class ReBaseGoodsServiceImpl extends BaseServiceImpl implements ReBaseGoodsService {	@Resource	private ICommodityTypeDao commodityTypeDAO;	    @Override    public void returnBack(HttpServletRequest request, Integer baseGoodsId, Boolean isForShow, Boolean isEditWithoutDel) {    	    	try{        //获取商家已投放的商城和未投放的商城；        ReGoodsOfBase baseGoods = reGoodsOfBaseDAO.findById(baseGoodsId);        request.setAttribute("baseGoods", baseGoods);        List<Integer> launchMalls = baseGoods.getLaunchMalls();//        System.out.println(baseGoods.getLaunchMallsName());//        System.out.println(launchMalls);        request.setAttribute("launchMall", JSONObject.toJSON(launchMalls));//将已投放的商城放到session中，便于显示；        //获取一级分类列表        String con = "isValid = true AND level = 1 and modelId = 2";        List<CommodityType> list = (List<CommodityType>) commodityTypeDAO.findByCon(CommodityType.class, con);        request.setAttribute("commodityTypeList", list);                for (Integer each : launchMalls) {            if (each.equals(ReGoodsOfBase.sellerMall)) {                ReGoodsOfSellerMall reGoodsOfSellerMall = reBaseGoodsDAO.getMallObjByBaseGoods(baseGoods, ReGoodsOfSellerMall.class);                if (reGoodsOfSellerMall != null) {                    request.setAttribute("reGoodsOfSellerMall", reGoodsOfSellerMall);                                        String rights = "";                    if(reGoodsOfSellerMall.getRightsProtect()!=null){                    	  char [] right = reGoodsOfSellerMall.getRightsProtect().toCharArray();                          for(int i=0;i<right.length;i++){                          	if("1".equals(String.valueOf(right[i]))){                          		rights+="正品保障,";                          	}else if("2".equals(String.valueOf(right[i]))){                          		rights+="快速发货,";                          	}else if("3".equals(String.valueOf(right[i]))){                          		rights+="售后无忧";                          	}                          }                    }                                      request.setAttribute("rights", rights);                    if (!reGoodsOfSellerMall.getIsNoStandard()) {                        request.setAttribute("reGoodsOfSellerMallFirstStandards", getFirstStandardsInputs(reGoodsOfSellerMall.getParentStandardList()));                        request.setAttribute("reGoodsOfSellerMallTableHead", getTableHead(reGoodsOfSellerMall.getParentStandardList()));                        request.setAttribute("reGoodsOfSellerMallTableLine",                                getTableLine(reGoodsOfSellerMall.getStandardDetailsList(), each, isForShow, isEditWithoutDel,reGoodsOfSellerMall));                    }                }            } else if (each.equals(ReGoodsOfBase.scoreMall)) {                ReGoodsOfScoreMall reGoodsOfScoreMall = reBaseGoodsDAO.getMallObjByBaseGoods(baseGoods, ReGoodsOfScoreMall.class);                if (reGoodsOfScoreMall != null) {                    request.setAttribute("reGoodsOfScoreMall", reGoodsOfScoreMall);                    if (!reGoodsOfScoreMall.getIsNoStandard()) {                        request.setAttribute("reGoodsOfScoreMallFirstStandards", getFirstStandardsInputs(reGoodsOfScoreMall.getParentStandardList()));                        request.setAttribute("reGoodsOfScoreMallTableHead", getTableHead(reGoodsOfScoreMall.getParentStandardList()));                        request.setAttribute("reGoodsOfScoreMallTableLine",                                getTableLine(reGoodsOfScoreMall.getStandardDetailsList(), each, isForShow, isEditWithoutDel,reGoodsOfScoreMall));                    }                }            } else if (each.equals(ReGoodsOfBase.localSpecialtyMall)) {                ReGoodsOfLocalSpecialtyMall reGoodsOfLocalSpecialtyMall = reBaseGoodsDAO.getMallObjByBaseGoods(baseGoods, ReGoodsOfLocalSpecialtyMall.class);                if (reGoodsOfLocalSpecialtyMall != null) {                    request.setAttribute("reGoodsOfLocalSpecialtyMall", reGoodsOfLocalSpecialtyMall);                                                            if (!reGoodsOfLocalSpecialtyMall.getIsNoStandard()) {                        request.setAttribute("reGoodsOfLocalSpecialtyMallFirstStandards", getFirstStandardsInputs(reGoodsOfLocalSpecialtyMall.getParentStandardList()));                        request.setAttribute("reGoodsOfLocalSpecialtyMallTableHead", getTableHead(reGoodsOfLocalSpecialtyMall.getParentStandardList()));                        request.setAttribute("reGoodsOfLocalSpecialtyMallTableLine",                                getTableLine(reGoodsOfLocalSpecialtyMall.getStandardDetailsList(), each, isForShow, isEditWithoutDel,reGoodsOfLocalSpecialtyMall));                    }                }            } else if (each.equals(ReGoodsOfBase.nineNineMall)) {                ReGoodsOfNineNineMall reGoodsOfNineNineMall = reBaseGoodsDAO.getMallObjByBaseGoods(baseGoods, ReGoodsOfNineNineMall.class);                if (reGoodsOfNineNineMall != null) {                    request.setAttribute("reGoodsOfNineNineMall", reGoodsOfNineNineMall);                    if (!reGoodsOfNineNineMall.getIsNoStandard()) {                        request.setAttribute("reGoodsOfNineNineMallFirstStandards", getFirstStandardsInputs(reGoodsOfNineNineMall.getParentStandardList()));                        request.setAttribute("reGoodsOfNineNineMallTableHead", getTableHead(reGoodsOfNineNineMall.getParentStandardList()));                        request.setAttribute("reGoodsOfNineNineMallTableLine",                                getTableLine(reGoodsOfNineNineMall.getStandardDetailsList(), each, isForShow, isEditWithoutDel,reGoodsOfNineNineMall));                    }                }            } else if (each.equals(ReGoodsOfBase.memberMall)) {                ReGoodsOfMemberMall reGoodsOfMemberMall = reBaseGoodsDAO.getMallObjByBaseGoods(baseGoods, ReGoodsOfMemberMall.class);                if (reGoodsOfMemberMall != null) {                    request.setAttribute("reGoodsOfMemberMall", reGoodsOfMemberMall);                    if (!reGoodsOfMemberMall.getIsNoStandard()) {                        request.setAttribute("reGoodsOfMemberMallFirstStandards", getFirstStandardsInputs(reGoodsOfMemberMall.getParentStandardList()));                        request.setAttribute("reGoodsOfMemberMallTableHead", getTableHead(reGoodsOfMemberMall.getParentStandardList()));                        request.setAttribute("reGoodsOfMemberMallTableLine",                                getTableLine(reGoodsOfMemberMall.getStandardDetailsList(), each, isForShow, isEditWithoutDel,reGoodsOfMemberMall));                    }                }            } else if (each.equals(ReGoodsOfBase.seckillMall)) {                ReGoodsOfSeckillMall reGoodsOfSeckillMall = reBaseGoodsDAO.getMallObjByBaseGoods(baseGoods, ReGoodsOfSeckillMall.class);                if (reGoodsOfSeckillMall != null) {                    request.setAttribute("reGoodsOfSeckillMall", reGoodsOfSeckillMall);                    if (!reGoodsOfSeckillMall.getIsNoStandard()) {                        request.setAttribute("reGoodsOfSeckillMallFirstStandards", getFirstStandardsInputs(reGoodsOfSeckillMall.getParentStandardList()));                        request.setAttribute("reGoodsOfSeckillMallTableHead", getTableHead(reGoodsOfSeckillMall.getParentStandardList()));                        request.setAttribute("reGoodsOfSeckillMallTableLine",                                getTableLine(reGoodsOfSeckillMall.getStandardDetailsList(), each, isForShow, isEditWithoutDel,reGoodsOfSeckillMall));                    }                }            } else if (each.equals(ReGoodsOfBase.changeMall)) {                ReGoodsOfChangeMall reGoodsOfChangeMall = reBaseGoodsDAO.getMallObjByBaseGoods(baseGoods, ReGoodsOfChangeMall.class);                if (reGoodsOfChangeMall != null) {                    request.setAttribute("reGoodsOfChangeMall", reGoodsOfChangeMall);                    if (!reGoodsOfChangeMall.getIsNoStandard()) {                        request.setAttribute("reGoodsOfChangeMallFirstStandards", getFirstStandardsInputs(reGoodsOfChangeMall.getParentStandardList()));                        request.setAttribute("reGoodsOfChangeMallTableHead", getTableHead(reGoodsOfChangeMall.getParentStandardList()));                        request.setAttribute("reGoodsOfChangeMallTableLine",                                getTableLine(reGoodsOfChangeMall.getStandardDetailsList(), each, isForShow, isEditWithoutDel,reGoodsOfChangeMall));                    }                }            }else if(each.equals(ReGoodsOfBase.lockMall)){            	//reBaseGoodsDAO.findByGoodsOrder()            	            	 ReGoodsOfLockMall reGoodsOfLockMall = reBaseGoodsDAO.getMallObjByBaseGoods(baseGoods, ReGoodsOfLockMall.class);            	 if(reGoodsOfLockMall != null ){            		  request.setAttribute("reGoodsOfLockMall", reGoodsOfLockMall);            		  if (!reGoodsOfLockMall.getIsNoStandard()) {                          request.setAttribute("reGoodsOfChangeMallFirstStandards", getFirstStandardsInputs(reGoodsOfLockMall.getParentStandardList()));                          request.setAttribute("reGoodsOfChangeMallTableHead", getTableHead(reGoodsOfLockMall.getParentStandardList()));                          request.setAttribute("reGoodsOfChangeMallTableLine",                                  getTableLine(reGoodsOfLockMall.getStandardDetailsList(), each, isForShow, isEditWithoutDel,reGoodsOfLockMall));                      }            	 }            	             }        }                //获取修改商品前的商品信息        List<ReGoodsOfBaseEditRecord> editRecordList = reGoodsOfBaseEditRecordDao.findByProperty("reGoodsOfBase.id", baseGoodsId);        if(editRecordList.size()>0){        	request.setAttribute("record", editRecordList.get(0));        }                    	}catch(Exception e){    		    		e.printStackTrace();    		TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();        	}    }    /**     * 对表格中的每一行数据进行回显，     * <p>     * <tr>     * <td>46     * <input name="detailsValue2[]" type="hidden" value="33">     * <input name="detailsName2[]" type="hidden" value="46">     * </td>     * <td>红色     * <input name="detailsValue1[]" type="hidden" value="29">     * <input name="detailsName1[]" type="hidden" value="红色">     * </td>     * <td>     * <input name="repertory[]">     * </td>     * <td>     * <input name="price[]">     * </td>     * <td>     * <input name="redPaper[]"></td>     * <input type="button" onclick="delTr(this);" value="删除">     * </tr>     */    private String getTableLine(List<Map<String, Object>> secondStandards, Integer mallType, Boolean isForShow, Boolean isEditWithoutDel,ReBaseGoods reBaseGoods) {        isForShow = isForShow == null ? false : isForShow;        isEditWithoutDel = isEditWithoutDel == null ? false : isEditWithoutDel;        //不能同时既是为了展示，有事为了补充库存；        if (isForShow && isEditWithoutDel) {            isForShow = false;            isEditWithoutDel = false;        }        StringBuilder sb = new StringBuilder(500);        if (secondStandards == null)            return sb.toString();        for (Map<String, Object> each : secondStandards) {            sb.append("<tr>");          //如果有第一个规格属性，拼接第一个；            if (StringUtil.hasLength((String) each.get("id1"))) {                sb.append("<td>").                        append((String) each.get("name1")).                        append("<input name=\"detailsName1[]\" type=\"hidden\" value=\"").append((String) each.get("id1")).append("\">").                        append("<input name=\"detailsValue1[]\" type=\"hidden\" value=\"").append((String) each.get("name1")).append("\">").                        append("</td>");            }                        //如果有第二个规格属性，再拼接第二个；            if (StringUtil.hasLength((String) each.get("id2"))) {                sb.append("<td>").                        append((String) each.get("name2")).                        append("<input name=\"detailsName2[]\" type=\"hidden\" value=\"").append((String) each.get("name2")).append("\">").                        append("<input name=\"detailsValue2[]\" type=\"hidden\" value=\"").append((String) each.get("id2")).append("\">").                        append("</td>");            }          //如果有第三个规格属性，拼接第三个；            if (StringUtil.hasLength((String) each.get("id3"))) {                sb.append("<td>").                        append((String) each.get("name3")).                        append("<input name=\"detailsName3[]\" type=\"hidden\" value=\"").append((String) each.get("id3")).append("\">").                        append("<input name=\"detailsValue3[]\" type=\"hidden\" value=\"").append((String) each.get("name3")).append("\">").                        append("</td>");            }                        if (mallType.equals(ReGoodsOfBase.sellerMall)) {                if (isForShow) {                    //拼接库存；                    sb.append("<td>").append(each.get("repertory")).append("</td>");                    //拼接售价；                    sb.append("<td>").append(each.get("price")).append("</td>");                } else {                    //拼接库存；                    sb.append("<td><input name=\"repertory[]\" value=\"").append(each.get("repertory")).append("\"></td>");                    if (isEditWithoutDel) {                        //拼接售价；                        sb.append("<td>").append(each.get("price")).append("</td>");                    } else {                        //拼接售价；                       sb.append("<td><input name=\"price[]\" value=\"").append(each.get("price")).append("\"></td>");                    }                }            } else if (mallType.equals(ReGoodsOfBase.seckillMall)) {                if (isForShow) {                    //拼接库存；                    sb.append("<td>").append(each.get("repertory")).append("</td>");                    //拼接售价；                    sb.append("<td>").append(each.get("price")).append("</td>");                } else {                    //拼接库存；                    sb.append("<td><input name=\"repertory[]\" value=\"").append(each.get("repertory")).append("\"></td>");                    if (isEditWithoutDel) {                        //拼接售价；                        sb.append("<td>").append(each.get("price")).append("</td>");                    } else {                        //拼接售价；                        sb.append("<td><input name=\"price[]\" value=\"").append(each.get("price")).append("\"></td>");                    }                }            } else if (mallType.equals(ReGoodsOfBase.scoreMall)) {            	int score=0;            	if(reBaseGoods.getNoStandardScore()!=null&&reBaseGoods.getNoStandardScore()>0){  //如果条件满足那么就是 多个规格一个积分价的版本            		score=reBaseGoods.getNoStandardScore();            	}else{  //新版本多个规格对应多个价格            		            		score=(int)Math.ceil(Double.parseDouble(each.get("price").toString()));            	}            	                if (isForShow) {                    //拼接库存；                    sb.append("<td>").append(each.get("repertory")).append("</td>");                    //拼接积分；                    sb.append("<td>").append(score).append("</td>");                } else {                    //拼接库存；                    sb.append("<td><input name=\"repertory[]\" value=\"").append(each.get("repertory")).append("\"></td>");                    if (isEditWithoutDel) {                        //拼接积分；                        sb.append("<td>").append(each.get("score")).append("</td>");                    } else {                        //拼接积分；                        sb.append("<td><input name=\"score[]\" value=\"").append(each.get("score")).append("\"></td>");                    }                }            } else if (mallType.equals(ReGoodsOfBase.localSpecialtyMall)) {                if (isForShow) {                    //拼接库存；                    sb.append("<td>").append(each.get("repertory")).append("</td>");                    //拼接售价；                    sb.append("<td>").append(each.get("price")).append("</td>");                   /* 拼接返现比例（存储在红包字段）;                    sb.append("<td>").append(each.get("redPaper")).append("</td>");*/                } else {                    //拼接库存；                    sb.append("<td><input name=\"repertory[]\" value=\"").append(each.get("repertory")).append("\"></td>");                    if (isEditWithoutDel) {                        //拼接售价；                        sb.append("<td>").append(each.get("price")).append("</td>");                       /* 拼接返现比例（存储在红包字段）;                        sb.append("<td>").append(each.get("redPaper")).append("</td>");*/                    } else {                        //拼接售价；                        sb.append("<td><input name=\"price[]\" value=\"").append(each.get("price")).append("\"></td>");                        /*拼接返现比例（存储在红包字段）;                        sb.append("<td><input name=\"\" value=\"").append(each.get("redPaper")).append("\"></td>");*/                    }                }            } else if (mallType.equals(ReGoodsOfBase.nineNineMall)) {                if (isForShow) {                    //拼接库存；                    sb.append("<td>").append(each.get("repertory")).append("</td>");                    //拼接售价；                    sb.append("<td>").append(each.get("price")).append("</td>");                    /*拼接返现比例（存储在红包字段）;                    sb.append("<td>").append(each.get("redPaper")).append("</td>");*/                } else {                    //拼接库存；                    sb.append("<td><input name=\"repertory[]\" value=\"").append(each.get("repertory")).append("\"></td>");                    if (isEditWithoutDel) {                        //拼接售价；                        sb.append("<td>").append(each.get("price")).append("</td>");                        /*拼接返现比例（存储在红包字段）;                        sb.append("<td>").append(each.get("redPaper")).append("</td>");*/                    } else {                        //拼接售价；                        sb.append("<td><input name=\"price[]\" value=\"").append(each.get("price")).append("\"></td>");                        //拼接返现比例（存储在红包字段）;                        //sb.append("<td><input name=\"redPaper[]\" value=\"").append(each.get("redPaper")).append("\"></td>");                    }                }            } else if (mallType.equals(ReGoodsOfBase.memberMall)) {                if (isForShow) {                    //拼接库存；                    sb.append("<td>").append(each.get("repertory")).append("</td>");                } else {                    //拼接库存；                    sb.append("<td><input name=\"repertory[]\" value=\"").append(each.get("repertory")).append("\"></td>");                }            }            //拼接删除按钮，和结尾；            if (isEditWithoutDel || isForShow) {                sb.append("<td><input type=\"button\" value=\"不可操作\"></td></tr>");            } else {                sb.append("<td><input type=\"button\" onclick=\"delTr(this);\" value=\"删除\"></td></tr>");            }        }        return sb.toString();    }    /**     * 在商品规格上传时，class为checkAera的区域中，保存了一级商品规格的各种信息；     * 回显时，需要将这部分信息回显回去；样式如下；     * <p>     * <input type="hidden" name="firstStandardKey[]" value="28">     * <input type="hidden" name="firstStandardName[]" value="颜色">     * <input type="hidden" name="firstStandardKey[]" value="32">     * <input type="hidden" name="firstStandardName[]" value="尺码">     */    private String getFirstStandardsInputs(List<Map<String, Object>> parentStrandardList) {        StringBuilder sb = new StringBuilder(500);        if (parentStrandardList != null) {            for (Map<String, Object> each : parentStrandardList) {                sb.append("<input type=\"hidden\" name=\"firstStandardKey[]\" value=\"").append(each.get("standardId")).append("\">");                sb.append("<input type=\"hidden\" name=\"firstStandardName[]\" value=\"").append(each.get("standardName")).append("\">");            }        }        return sb.toString();    }    /**     * 规格表的第一行数据；形式如下：     * <p>     * <th>尺码</th>     * <th>颜色</th>     */    private String getTableHead(List<Map<String, Object>> parentStrandardList) {        StringBuilder sb = new StringBuilder(100);        if (parentStrandardList != null) {        	/*for(int i = parentStrandardList.size()-1;i >=0;i-- ){        		  sb.append("<th>").append(parentStrandardList.get(i).get("standardName")).append("</th>");        	}*/        	        	for (int i = 0; i <parentStrandardList.size(); i++) {        		 sb.append("<th>").append(parentStrandardList.get(i).get("standardName")).append("</th>");			}//            for (Map<String, Object> each : parentStrandardList) {//              //            	//sb.append("<th>").append("规格项").append("</th>");//            }        }        return sb.toString();    }    @Override    public void edit(Integer id, HttpServletRequest request) {        ReBaseGoods baseGoods = reBaseGoodsDAO.findById(id);    }    @Override    public ReBaseGoods getGoodsByMallTypeAndGoodsId(Integer mallType, Integer goodsId) throws Exception {        if (ReGoodsOfBase.sellerMall.equals(mallType)) {            return reGoodsOfSellerMallDAO.findById(goodsId);        } else if (ReGoodsOfBase.scoreMall.equals(mallType)) {            return reGoodsOfScoreMallDAO.findById(goodsId);        } else if (ReGoodsOfBase.seckillMall.equals(mallType)) {            return reGoodsOfSeckillMallDAO.findById(goodsId);        } else if (ReGoodsOfBase.memberMall.equals(mallType)) {            return reGoodsOfMemberMallDAO.findById(goodsId);        } else if (ReGoodsOfBase.nineNineMall.equals(mallType)) {            return reGoodsOfNineNineMallDAO.findById(goodsId);        } else if (ReGoodsOfBase.localSpecialtyMall.equals(mallType)) {            return reGoodsOfLocalSpecialtyMallDAO.findById(goodsId);        }else if (ReGoodsOfBase.changeMall.equals(mallType)) {            return reGoodsOfChangeMallDAO.findById(goodsId);        }        throw new Exception("找不到商城id为" + mallType + "，商品id值为" + goodsId + "的商品；");    }    @Override    public void addRepertory(Boolean isNoStandard, ReBaseGoods reBaseGoods, HttpServletRequest request) throws Exception {        //库存数量；        List<Integer> repertoryList = stringArrayToIntegerList(request.getParameterValues("repertory[]"));        //商品规格明细id集合；        List<Integer> idList1 = stringArrayToIntegerList(request.getParameterValues("detailsName1[]"));        List<Integer> idList2 = stringArrayToIntegerList(request.getParameterValues("detailsName2[]"));        List<Integer> idList3 = stringArrayToIntegerList(request.getParameterValues("detailsName3[]"));        //检查无商品规格时的库存；        if (isNoStandard && repertoryList.size() != 1) {            throw new Exception("参数错误：补充库存时，无商品规格时，应该有且只有一个库存参数，但是现在的数量为" + repertoryList.size());        }        //修改库存操作；        if (reBaseGoods instanceof ReGoodsOfSellerMall) {            ReGoodsOfSellerMall reGoodsOfSellerMall = reGoodsOfSellerMallDAO.findById(reBaseGoods.getId());            if (isNoStandard) {//无商品规格时；                reGoodsOfSellerMall.setNoStandardRepertory((reGoodsOfSellerMall.getNoStandardRepertory()+repertoryList.get(0)));            } else {//有商品规格时；                reGoodsOfSellerMall.editGoodsRepertoryForBatch(idList1, idList2, idList3, repertoryList);            }        } else if (reBaseGoods instanceof ReGoodsOfScoreMall) {            ReGoodsOfScoreMall reGoodsOfScoreMall = reGoodsOfScoreMallDAO.findById(reBaseGoods.getId());            if (isNoStandard) {//无商品规格时；                reGoodsOfScoreMall.setNoStandardRepertory((reGoodsOfScoreMall.getNoStandardRepertory()+repertoryList.get(0)));            } else {//有商品规格时；                reGoodsOfScoreMall.editGoodsRepertoryForBatch(idList1, idList2, idList3, repertoryList);            }        } else if (reBaseGoods instanceof ReGoodsOfSeckillMall) {            ReGoodsOfSeckillMall reGoodsOfSeckillMall = reGoodsOfSeckillMallDAO.findById(reBaseGoods.getId());            if (isNoStandard) {//无商品规格时；                reGoodsOfSeckillMall.setNoStandardRepertory((reGoodsOfSeckillMall.getNoStandardRepertory()+repertoryList.get(0)));            } else {//有商品规格时；                reGoodsOfSeckillMall.editGoodsRepertoryForBatch(idList1, idList2, idList3, repertoryList);            }        } else if (reBaseGoods instanceof ReGoodsOfLocalSpecialtyMall) {            ReGoodsOfLocalSpecialtyMall reGoodsOfLocalSpecialtyMall = reGoodsOfLocalSpecialtyMallDAO.findById(reBaseGoods.getId());            if (isNoStandard) {//无商品规格时；                reGoodsOfLocalSpecialtyMall.setNoStandardRepertory((reGoodsOfLocalSpecialtyMall.getNoStandardRepertory()+repertoryList.get(0)));            } else {//有商品规格时；                reGoodsOfLocalSpecialtyMall.editGoodsRepertoryForBatch(idList1, idList2, idList3, repertoryList);            }        } else if (reBaseGoods instanceof ReGoodsOfNineNineMall) {            ReGoodsOfNineNineMall reGoodsOfNineNineMall = reGoodsOfNineNineMallDAO.findById(reBaseGoods.getId());            if (isNoStandard) {//无商品规格时；                reGoodsOfNineNineMall.setNoStandardRepertory((reGoodsOfNineNineMall.getNoStandardRepertory()+repertoryList.get(0)));            } else {//有商品规格时；                reGoodsOfNineNineMall.editGoodsRepertoryForBatch(idList1, idList2, idList3, repertoryList);            }        } else if (reBaseGoods instanceof ReGoodsOfMemberMall) {            ReGoodsOfMemberMall reGoodsOfMemberMall = reGoodsOfMemberMallDAO.findById(reBaseGoods.getId());            if (isNoStandard) {//无商品规格时；                reGoodsOfMemberMall.setNoStandardRepertory((reGoodsOfMemberMall.getNoStandardRepertory()+repertoryList.get(0)));            } else {//有商品规格时；                reGoodsOfMemberMall.editGoodsRepertoryForBatch(idList1, idList2, idList3, repertoryList);            }        }    }    /**     * 强string类型的数组转换为List集合；     *     * @param stringArray     * @return     */    private List<Integer> stringArrayToIntegerList(String[] stringArray) {        List<Integer> list = new ArrayList<>();        if (stringArray == null || stringArray.length == 0) {            return list;        } else {            for (int i = 0; i < stringArray.length; i++) {                try {                    Integer num = Integer.parseInt(stringArray[i]);                    list.add(num);                } catch (Exception e) {                    list.add(0);                    TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();                    }            }            return list;        }    }	/* (non-Javadoc)	 * @see com.axp.service.goods.ReBaseGoodsService#returnBack_lock(javax.servlet.http.HttpServletRequest, java.lang.Integer, boolean, boolean, java.lang.String)	 */	@Override	public void returnBack_lock(HttpServletRequest request, Integer baseGoodsId, Boolean isForShow, Boolean isEditWithoutDel,String goodsOrder) {		ReGoodsOfBase baseGoods = reGoodsOfBaseDAO.findById(baseGoodsId);        request.setAttribute("baseGoods", baseGoods);        List<Integer> launchMalls = baseGoods.getLaunchMalls();//        System.out.println(baseGoods.getLaunchMallsName());//        System.out.println(launchMalls);        request.setAttribute("launchMall", JSONObject.toJSON(launchMalls));//将已投放的商城放到session中，便于显示；        try {        //获取一级分类列表        String con = "isValid = true AND level = 1 and modelId = 2";        List<CommodityType> list = (List<CommodityType>) commodityTypeDAO.findByCon(CommodityType.class, con);        request.setAttribute("commodityTypeList", list);        ReGoodsOfLockMall reGoodsOfLockMall = (ReGoodsOfLockMall) reBaseGoodsDAO.getMallObjByGoodsOrder(goodsOrder);   	 	//ReGoodsOfLockMall reGoodsOfLockMall = reGoodsOfLockMallDao.findByGoodsOrder(goodsOrder);   	 		   	 if(reGoodsOfLockMall != null ){	   		  request.setAttribute("reGoodsOfLockMall", reGoodsOfLockMall);	   		  if (!reGoodsOfLockMall.getIsNoStandard()) {	                 request.setAttribute("reGoodsOfChangeMallFirstStandards", getFirstStandardsInputs(reGoodsOfLockMall.getParentStandardList()));	                 request.setAttribute("reGoodsOfChangeMallTableHead", getTableHead(reGoodsOfLockMall.getParentStandardList()));	                 request.setAttribute("reGoodsOfChangeMallTableLine",	                         getTableLine(reGoodsOfLockMall.getStandardDetailsList(), ReGoodsOfBase.lockMall, isForShow, isEditWithoutDel,reGoodsOfLockMall));	             }	   	 }        } catch (Exception e) {        	// TODO Auto-generated catch block        	e.printStackTrace();        }			}}