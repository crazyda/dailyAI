package com.axp.service.goods.impl;import java.sql.Timestamp;import java.util.Date;import java.util.List;import java.util.Map;import javax.annotation.Resource;import javax.persistence.criteria.CriteriaBuilder.In;import javax.servlet.http.HttpServletRequest;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.alibaba.fastjson.JSONObject;import com.axp.dao.DateBaseDAO;import com.axp.model.CommodityType;import com.axp.model.ProvinceEnum;import com.axp.model.ReBaseGoods;import com.axp.model.ReGoodsOfBase;import com.axp.model.ReGoodsOfBaseEditRecord;import com.axp.model.ReGoodsOfLocalSpecialtyMall;import com.axp.model.ReGoodsOfSellerMall;import com.axp.query.PageResult;import com.axp.service.goods.ReGoodsOfLocalSpecialtyMallService;import com.axp.service.professional.UserService;import com.axp.service.system.impl.BaseServiceImpl;import com.axp.util.DateUtil;import com.axp.util.QueryModel;import com.axp.util.StringUtil;@Servicepublic class ReGoodsOfLocalSpecialtyMallServiceImpl extends BaseServiceImpl implements ReGoodsOfLocalSpecialtyMallService {	@Resource	private UserService userService;	@Autowired	private DateBaseDAO dateBaseDAO;    @Override    public void doSave(ReBaseGoods.MallParamter mallParamter,HttpServletRequest request) throws Exception {        //确保基础商品为持久化对象；        ReGoodsOfBase goods = reGoodsOfBaseDAO.findById(mallParamter.getBaseGoods().getId());        //判断是第一次投放，还是编辑投放操作；        ReGoodsOfLocalSpecialtyMall g;        String goodsOrder = mallParamter.getGoodsOrder();        if (StringUtil.hasLength(goodsOrder) && goodsOrder.startsWith(ReBaseGoods.LocalSpecialtyMall)) {            g = (ReGoodsOfLocalSpecialtyMall) reBaseGoodsDAO.getMallObjByGoodsOrder(goodsOrder);        } else {            List<ReGoodsOfLocalSpecialtyMall> list = reGoodsOfLocalSpecialtyMallDAO.getGoodsByBaseGoodsId(goods.getId());            if (list == null || list.size() == 0) {                g = new ReGoodsOfLocalSpecialtyMall();            } else if (list.size() == 1) {                g = list.get(0);            } else {                throw new Exception("数据库数据错误：在当地特产商城中，相同的基础商品出现了多条记录，基础商品id值为：" + goods.getId());            }        }        	        //保存商城操作        if (g.getId() == null) {            reGoodsOfLocalSpecialtyMallDAO.save(g);//为了获取id值，必须做两次保存；        }        g.setCreateTime(new Timestamp(System.currentTimeMillis()));        g.setBaseGoodsId(goods.getId());        g.setSnapshotGoods(mallParamter.getSnapshotGoods());        g.setStandardDetails(mallParamter.getStandardDetails());        g.setDisplayPrice(mallParamter.getDisplayPrice());        g.setPrice(mallParamter.getPrice());        //设置销量        String sales = request.getParameter("sales");        if(StringUtils.isNotBlank(sales)){        	g.setSales(Integer.parseInt(sales));        }        g.setRedPaper(0.0);//此处的红包指的是各地特产的返现的比例,为了不增加字段，就将返现比例存储在红包字段中；        g.setTransportationType(mallParamter.getTransportationType());        g.setTransportationPrice(mallParamter.getTransportationPrice());        g.setAddedTime(mallParamter.getAddedTime());        g.setShelvesTime(mallParamter.getShelvesTime());        //获取页面传上来的所选类别值,然后保存        String modelId = request.getParameter("modelId")==null?"":request.getParameter("modelId");        if(StringUtils.isNotBlank(modelId)){        	CommodityType type = commodityTypeDAO.findById(Integer.parseInt(modelId));        	g.setCommodityType(type);        }        g.setGoodsOrder(ReBaseGoods.LocalSpecialtyMall + g.getId());        g.setCommentCount(0);        List<ReGoodsOfBaseEditRecord> editRecordList = reGoodsOfBaseEditRecordDao.findByProperty("reGoodsOfBase.id",goods.getId());        //重新上架 销量不清零        if(editRecordList.size()>0){        	g.setSalesVolume(editRecordList.get(0).getLocalSpecialtyMallSalesVolume());        }else{        	g.setSalesVolume(0);        }        g.setIsChecked(false);        g.setCashBack(0.0);        if (mallParamter.getIsNoStandard()) {//如果用户勾选了无商品规格，这三个值才有意义；            g.setIsNoStandard(true);            g.setNoStandardPrice(mallParamter.getNoStandardPrice());            g.setNoStandardRepertory(mallParamter.getNoStandardRepertory());            g.setRedPaper(0.0);            g.setPrice(mallParamter.getNoStandardPrice());        } else {            g.setIsNoStandard(false);        }                        //获取页面传上来的所选地区值，然后保存相对应的地区名称        String province = request.getParameter("province")==null?"":request.getParameter("province");		String city = request.getParameter("city")==null?"":request.getParameter("city");		String county = request.getParameter("county")==null?"":request.getParameter("county");		Integer zoneid = userService.getZoneId(province,city,county);        QueryModel queryModel = new QueryModel();		queryModel.clearQuery();		queryModel.combPreEquals("id",zoneid );		ProvinceEnum provinceEnum = (ProvinceEnum) dateBaseDAO.findOne(ProvinceEnum.class, queryModel);        //以下为商城特有字段赋值；		if(provinceEnum!=null && StringUtils.isNotBlank(provinceEnum.getName())){			g.setPlaceOfProduction(provinceEnum==null?"":provinceEnum.getName());			g.setProvinceEnum(provinceEnum);		}        g.setPack(mallParamter.getPack());    }            @Override	public void doSavePut(HttpServletRequest request) throws Exception {    	String goodsOrder =request.getParameter("goodsOrder");//周边店铺    	ReGoodsOfSellerMall goodsOfSellerMall =  null;		ReGoodsOfLocalSpecialtyMall goodsOfLocalSpecialtyMall = null;		String str = goodsOrder.substring(0,3);		String goodsId = goodsOrder.substring(3,goodsOrder.length());//商品ID		if (!str.equals("sem")) {			goodsOfLocalSpecialtyMall = reGoodsOfLocalSpecialtyMallDAO.findById(Integer.parseInt(goodsId));			goodsOfSellerMall = goodsOfLocalSpecialtyMall.getReGoodsOfSellerMall();		}else{			String sellerMallId=goodsOrder.substring(3,goodsOrder.length());//周边店铺数据id			goodsOfSellerMall = reGoodsOfSellerMallDAO.findById(Integer.parseInt(sellerMallId));			goodsOfLocalSpecialtyMall = new ReGoodsOfLocalSpecialtyMall();		}				if (goodsOfSellerMall!=null) {			goodsOfLocalSpecialtyMall.setPrice(goodsOfSellerMall.getPrice());			goodsOfLocalSpecialtyMall.setDefaultRepertory(goodsOfSellerMall.getDefaultRepertory());			goodsOfLocalSpecialtyMall.setReGoodsOfSellerMall(goodsOfSellerMall);			goodsOfLocalSpecialtyMall.setDisplayPrice(goodsOfSellerMall.getDisplayPrice());		    goodsOfLocalSpecialtyMall.setAddedTime(new java.sql.Timestamp(System.currentTimeMillis()));			goodsOfLocalSpecialtyMall.setBaseGoodsId(goodsOfSellerMall.getBaseGoodsId());			goodsOfLocalSpecialtyMall.setCreateTime(new java.sql.Timestamp(System.currentTimeMillis()));			goodsOfLocalSpecialtyMall.setIsChecked(false);			goodsOfLocalSpecialtyMall.setSnapshotGoods(goodsOfSellerMall.getSnapshotGoods());			goodsOfLocalSpecialtyMall.setTransportationType(1);			goodsOfLocalSpecialtyMall.setTransportationPrice(0d);			goodsOfLocalSpecialtyMall.setIsNoStandard(goodsOfSellerMall.getIsNoStandard());			goodsOfLocalSpecialtyMall.setIsValid(true);			goodsOfLocalSpecialtyMall.setNoStandardPrice(goodsOfSellerMall.getNoStandardPrice());			goodsOfLocalSpecialtyMall.setNoStandardScore(goodsOfSellerMall.getNoStandardScore());			goodsOfLocalSpecialtyMall.setNoStandardRepertory(goodsOfSellerMall.getNoStandardRepertory());			goodsOfLocalSpecialtyMall.setIsNoStandard(goodsOfSellerMall.getIsNoStandard());			goodsOfLocalSpecialtyMall.setSnapshotGoods(goodsOfSellerMall.getSnapshotGoods());			goodsOfLocalSpecialtyMall.setStandardDetails(goodsOfSellerMall.getStandardDetails());			goodsOfLocalSpecialtyMall.setRightsProtect(goodsOfSellerMall.getRightsProtect());			reGoodsOfLocalSpecialtyMallDAO.saveOrUpdate(goodsOfLocalSpecialtyMall);						goodsOfLocalSpecialtyMall.setGoodsOrder(ReBaseGoods.LocalSpecialtyMall+goodsOfLocalSpecialtyMall.getId());			reGoodsOfLocalSpecialtyMallDAO.update(goodsOfLocalSpecialtyMall);						ReGoodsOfBase baseGoods = reGoodsOfBaseDAO.findById(goodsOfSellerMall.getBaseGoodsId());			 try {				String changeLaunchMall = baseGoods.changeLaunchMall(baseGoods.getLaunchMall()==null?"00000000":baseGoods.getLaunchMall(), 4, true);				baseGoods.setLaunchMall(changeLaunchMall);				reGoodsOfBaseDAO.update(baseGoods);			} catch (Exception e) {				e.printStackTrace();			}		}    }    @Override    public Map<String, Object> shelves(HttpServletRequest request) {        String id = request.getParameter("id");        ReGoodsOfLocalSpecialtyMall localSpecialtyMall = reGoodsOfLocalSpecialtyMallDAO.findById(Integer.parseInt(id));        localSpecialtyMall.setIsValid(false);        reGoodsOfLocalSpecialtyMallDAO.merge(localSpecialtyMall);        return null;    }    @Override    public PageResult<ReGoodsOfLocalSpecialtyMall> getCheckPageresult(Integer currentPage, Integer pageSize,Integer adminUserId) {        return reGoodsOfLocalSpecialtyMallDAO.getCheckPageresult(currentPage, pageSize,adminUserId);    }    @Override    public Map<String, Object> doCheck(Map<String, Object> returnMamp, Boolean isPass, String checkDesc, Integer goodsId,Integer fenyong) throws Exception {        ReGoodsOfLocalSpecialtyMall reGoodsOfLocalSpecialtyMall = reGoodsOfLocalSpecialtyMallDAO.findById(goodsId);        if (isPass) {        	if(fenyong==null){        		//返回返回值；                returnMamp.put("success", false);                returnMamp.put("message", "请选择分佣类别；");                return returnMamp;        	}        	Date date=DateUtil.addDay2Date(180, new Date());        	reGoodsOfLocalSpecialtyMall.setShelvesTime(new Timestamp(date.getTime()));            reGoodsOfLocalSpecialtyMall.setIsChecked(true);            reGoodsOfLocalSpecialtyMall.setFenyong(fenyong);        } else {            //审核不通过（1，将isChecked设置为null，null表示审核不通过；2，此商品商家不成功，需要更改launchMall字段的值）            reGoodsOfLocalSpecialtyMall.setIsChecked(null);            Integer baseGoodsId = reGoodsOfLocalSpecialtyMall.getBaseGoodsId();            ReGoodsOfBase baseGoods = reGoodsOfBaseDAO.findById(baseGoodsId);            String s = baseGoods.changeLaunchMall(baseGoods.getLaunchMall()==null?"0000000":baseGoods.getLaunchMall(), ReGoodsOfBase.localSpecialtyMall, false);            baseGoods.setLaunchMall(s);        }        reGoodsOfLocalSpecialtyMall.setCheckDesc(checkDesc);        //返回返回值；        returnMamp.put("success", true);        returnMamp.put("message", "操作完成；");        return returnMamp;    }    @Override    public ReGoodsOfLocalSpecialtyMall get(Integer checkGoodsId) {        return reGoodsOfLocalSpecialtyMallDAO.findById(checkGoodsId);    }	}