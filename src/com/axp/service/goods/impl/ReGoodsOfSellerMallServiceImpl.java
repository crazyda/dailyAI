package com.axp.service.goods.impl;import java.sql.Timestamp;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.stereotype.Service;import com.axp.model.ReBaseGoods;import com.axp.model.ReGoodsOfBase;import com.axp.model.ReGoodsOfBaseEditRecord;import com.axp.model.ReGoodsOfScoreMall;import com.axp.model.ReGoodsOfSellerMall;import com.axp.query.PageResult;import com.axp.service.goods.ReGoodsOfSellerMallService;import com.axp.service.system.impl.BaseServiceImpl;import com.axp.util.CalcUtil;import com.axp.util.DateUtil;import com.axp.util.QueryModel;import com.axp.util.StringUtil;@Servicepublic class ReGoodsOfSellerMallServiceImpl extends BaseServiceImpl implements ReGoodsOfSellerMallService {    @Override    public void doSave(ReBaseGoods.MallParamter mallParamter) throws Exception {        //确保基础商品为持久化对象；        ReGoodsOfBase goods = reGoodsOfBaseDAO.findById(mallParamter.getBaseGoods().getId());        //判断是第一次投放，还是编辑投放操作；        ReGoodsOfSellerMall g;        String goodsOrder = mallParamter.getGoodsOrder();        if (StringUtil.hasLength(goodsOrder) && goodsOrder.startsWith(ReBaseGoods.SellerMall)) {            g = (ReGoodsOfSellerMall) reBaseGoodsDAO.getMallObjByGoodsOrder(goodsOrder);        } else {            List<ReGoodsOfSellerMall> list = reGoodsOfSellerMallDAO.getGoodsByBaseGoodsId(goods.getId());            if (list == null || list.size() == 0) {                g = new ReGoodsOfSellerMall();            } else if (list.size() == 1) {                g = list.get(0);            } else {                throw new Exception("数据库数据错误：在商家商城中，相同的基础商品出现了多条记录，基础商品id值为：" + goods.getId());            }        }        //保存商城操作；        reGoodsOfSellerMallDAO.save(g);//为了获取id值，必须做两次保存；        g.setBaseGoodsId(goods.getId());        g.setSnapshotGoods(mallParamter.getSnapshotGoods());        if(mallParamter.getStandardDetails()!=null){        	g.setStandardDetails(mallParamter.getStandardDetails());        }else{        	g.setStandardDetails(null);        }                g.setCreateTime(new Timestamp(System.currentTimeMillis()));        g.setDisplayPrice(mallParamter.getDisplayPrice());        g.setPrice(mallParamter.getPrice());        if(mallParamter.getSendScore() == 0){        	       	 g.setSendScoreNum(0);       	 g.setIsSendScore(false);       }else{       	       	g.setSendScoreNum(mallParamter.getSendScore());       	g.setIsSendScore(true);       }                       g.setRedPaper(0.0);        g.setTransportationType(mallParamter.getTransportationType());        g.setTransportationPrice(mallParamter.getTransportationPrice());        g.setAddedTime(mallParamter.getAddedTime());        g.setShelvesTime(mallParamter.getShelvesTime());        g.setGoodsOrder(ReBaseGoods.SellerMall + g.getId());        g.setCommentCount(0);        //---da        g.setIsNotChange(true);                List<ReGoodsOfBaseEditRecord> editRecordList = reGoodsOfBaseEditRecordDao.findByProperty("reGoodsOfBase.id",goods.getId());                //重新上架 销量不清零        if(editRecordList.size()>0){        	g.setSalesVolume(editRecordList.get(0).getSellerMallSalesVolume());        }else{        	g.setSalesVolume(0);        }        g.setIsChecked(false);        if (mallParamter.getIsNoStandard()) {//如果用户勾选了无商品规格，这三个值才有意义；            g.setIsNoStandard(true);            g.setNoStandardPrice(mallParamter.getNoStandardPrice());            g.setNoStandardRepertory(mallParamter.getNoStandardRepertory());            g.setNoStandardRedPaper(0.0);            g.setPrice(mallParamter.getNoStandardPrice());            g.setRedPaper(0.0);        } else {            g.setIsNoStandard(false);        }                ReGoodsOfSellerMall goodsOfSellerMall = reGoodsOfSellerMallDAO.findById(g.getId());        g.setReGoodsOfSellerMall(goodsOfSellerMall);        reGoodsOfSellerMallDAO.saveOrUpdate(goodsOfSellerMall);        //以下为商城特有字段赋值；    }    @Override    public Map<String, Object> zhiding(HttpServletRequest request, HttpServletResponse response) {        String id = request.getParameter("id");        String scoreMall = request.getParameter("scoreMall")==null?"":request.getParameter("scoreMall");        String type = request.getParameter("type");        String mallId = request.getParameter("mallId");        Map<String, Object> map = new HashMap<String, Object>();        if("scoreMall".equals(scoreMall)){        	ReGoodsOfScoreMall mall = reGoodsOfScoreMallDAO.findById(Integer.valueOf(id));        	if("2".equals(type)){        		if("3".equals(mallId)){        			        			mall.setZhidingTime(null);        		}else if("4".equals(mallId)){        			mall.setZhiding_99(null);        		}else if("6".equals(mallId)){        			mall.setZhiding_hot(null);        		}        		 map.put("status", true);        		 map.put("msg", "取消置顶成功");        	}else{        						if("3".equals(mallId)){					mall.setZhidingTime(new Timestamp(System.currentTimeMillis()));        		}else if("4".equals(mallId)){        			mall.setZhiding_99(new Timestamp(System.currentTimeMillis()));        		}else if("6".equals(mallId)){        			mall.setZhiding_hot(new Timestamp(System.currentTimeMillis()));        		}        		 map.put("status", true);        		 map.put("msg", "置顶成功");        	}        	reGoodsOfScoreMallDAO.saveOrUpdate(mall);        }else{        	        	ReGoodsOfSellerMall mall = reGoodsOfSellerMallDAO.findById(Integer.parseInt(id));        	int num = reGoodsOfSellerMallDAO.findMasStickyNum(mall.getSnapshotGoods().getSeller().getId());        	mall.setStickyNum(num + 1);        	reGoodsOfSellerMallDAO.update(mall);        }                      return map;    }    @Override    public PageResult<ReGoodsOfSellerMall> getCheckPageresult(Integer currentPage, Integer pageSize,Integer adminUserId) {        return reGoodsOfSellerMallDAO.getCheckPageresult(currentPage, pageSize,adminUserId);    }    @Override    public Map<String, Object> checkGoods(Integer checkGoodsId, Map<String, Object> returnMap) {        if (checkGoodsId == null) {            returnMap.put("message", "要审核的商品id为空；");        }        ReGoodsOfSellerMall reGoodsOfSellerMall = reGoodsOfSellerMallDAO.findById(checkGoodsId);        reGoodsOfSellerMall.setIsChecked(true);        returnMap.put("message", "审核成功；");        return returnMap;    }    @Override    public ReGoodsOfSellerMall get(Integer checkGoodsId) {        return reGoodsOfSellerMallDAO.findById(checkGoodsId);    }    @Override    public Map<String, Object> doCheck(Map<String, Object> returnMamp, Boolean isPass, String checkDesc, Integer goodsId) throws Exception {        ReGoodsOfSellerMall reGoodsOfSellerMall = reGoodsOfSellerMallDAO.findById(goodsId);        if (isPass) {            reGoodsOfSellerMall.setIsChecked(true);            Date date = DateUtil.addDay2Date(180, new Date());            reGoodsOfSellerMall.setShelvesTime(new Timestamp(date.getTime()));            reGoodsOfSellerMall.setTransportationType((Integer)returnMamp.get("transportationType"));                    } else {            //审核不通过（1，将isChecked设置为null，null表示审核不通过；2，此商品商家不成功，需要更改launchMall字段的值）            reGoodsOfSellerMall.setIsChecked(null);                        Integer baseGoodsId = reGoodsOfSellerMall.getBaseGoodsId();            ReGoodsOfBase baseGoods = reGoodsOfBaseDAO.findById(baseGoodsId);            String s = baseGoods.changeLaunchMall(baseGoods.getLaunchMall(), ReGoodsOfBase.sellerMall, false);            baseGoods.setLaunchMall(s);        } //da        reGoodsOfSellerMall.setCheckDesc(checkDesc);        reGoodsOfSellerMallDAO.saveOrUpdate(reGoodsOfSellerMall);        //返回返回值；        returnMamp.put("success", true);        returnMamp.put("message", "操作完成；");        return returnMamp;    }	@Override	public List<Map<String, Object>> getGoodsPublishStatus(Integer sellerMallId) {						//有顺序的				List<Map<String, Object>> list =new ArrayList<>();								Map<String, Object> data1 = new HashMap<String, Object>();				Map<String, Object> data2 = new HashMap<String, Object>();				Map<String, Object> data3 = new HashMap<String, Object>();				Map<String, Object> data4 = new HashMap<String, Object>();				Map<String, Object> data5 = new HashMap<String, Object>();				Map<String, Object> data6 = new HashMap<String, Object>();				Map<String, Object> data7 = new HashMap<String, Object>();				List<Object[]> countList =reGoodsOfSellerMallDAO.findPutStatus(sellerMallId);								int count = Integer.parseInt(countList.get(0)[0].toString());										data1.put("status", count==0);						list.add(data1);									count = Integer.parseInt(countList.get(0)[1].toString());				 	data2.put("status", count==0);					list.add(data2);								 count = Integer.parseInt(countList.get(0)[2].toString());				 	data3.put("status", count==0);					list.add(data3);									count =Integer.parseInt(countList.get(0)[3].toString());					 					data4.put("status", count==0);					list.add(data4);								 count =Integer.parseInt(countList.get(0)[4].toString());				 data5.put("status", count==0);					list.add(data5);								 count = Integer.parseInt(countList.get(0)[5].toString());				 	data6.put("status", count==0);					list.add(data6);									count = Integer.parseInt(countList.get(0)[6].toString());			 	data7.put("status", count==0);				list.add(data7);				return list;					}	@Override	public List<ReGoodsOfSellerMall> findByAll() {		QueryModel model = new QueryModel();		model.clearQuery();		model.combPreEquals("isValid", true);		model.combCondition("shelvesTime > now()");		model.combPreEquals("isChecked", true);		return dateBaseDao.findLists(ReGoodsOfSellerMall.class, model);	}	/* (non-Javadoc)	 * @see com.axp.service.goods.ReGoodsOfSellerMallService#findBySeller(java.lang.Integer)	 */	@Override	public List<ReGoodsOfSellerMall> findBySeller(Integer sellerId) {		QueryModel model = new QueryModel();		model.clearQuery();		model.combPreEquals("isValid", true);		model.combPreEquals("isChecked", true);		model.combPreEquals("snapshotGoods.seller.id", sellerId,"sellerId");		model.combCondition("shelvesTime > now()");		List<ReGoodsOfSellerMall> goods = dateBaseDao.findLists(ReGoodsOfSellerMall.class, model);		return goods;	}}