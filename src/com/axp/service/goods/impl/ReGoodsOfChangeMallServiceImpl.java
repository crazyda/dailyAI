package com.axp.service.goods.impl;import java.sql.Timestamp;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.alibaba.fastjson.JSONArray;import com.axp.model.ReBaseGoods;import com.axp.model.ReGoodsOfBase;import com.axp.model.ReGoodsOfChangeMall;import com.axp.model.ReGoodsOfSellerMall;import com.axp.model.Seller;import com.axp.query.PageResult;import com.axp.service.goods.ReGoodsOfBaseService;import com.axp.service.goods.ReGoodsOfChangeMallService;import com.axp.service.system.impl.BaseServiceImpl;import com.axp.util.DateUtil;import com.axp.util.StringUtil;@Servicepublic class ReGoodsOfChangeMallServiceImpl extends BaseServiceImpl implements ReGoodsOfChangeMallService {	@Autowired	ReGoodsOfBaseService reGoodsOfBaseService;    @Override    public void doSave(ReBaseGoods.MallParamter mallParamter) throws Exception {        //确保基础商品为持久化对象；        ReGoodsOfBase goods = reGoodsOfBaseDAO.findById(mallParamter.getBaseGoods().getId());        //判断是第一次投放，还是编辑投放操作；        ReGoodsOfChangeMall g;        String goodsOrder = mallParamter.getGoodsOrder();        if (StringUtil.hasLength(goodsOrder) && goodsOrder.startsWith(ReBaseGoods.ChangeMall)) {            g = (ReGoodsOfChangeMall) reBaseGoodsDAO.getMallObjByGoodsOrder(goodsOrder);        } else {            List<ReGoodsOfChangeMall> list = reGoodsOfChangeMallDAO.getGoodsByBaseGoodsId(goods.getId());            if (list == null || list.size() == 0) {                g = new ReGoodsOfChangeMall();            } else if (list.size() == 1) {                g = list.get(0);            } else {                throw new Exception("数据库数据错误：在商家商城中，相同的基础商品出现了多条记录，基础商品id值为：" + goods.getId());            }        }        //保存商城操作；        reGoodsOfChangeMallDAO.save(g);//为了获取id值，必须做两次保存；        g.setBaseGoodsId(goods.getId());        g.setSnapshotGoods(mallParamter.getSnapshotGoods());        g.setStandardDetails(mallParamter.getStandardDetails());        g.setCreateTime(new Timestamp(System.currentTimeMillis()));        g.setDisplayPrice(mallParamter.getDisplayPrice());        g.setPrice(mallParamter.getPrice());                g.setTransportationType(mallParamter.getTransportationType());        g.setTransportationPrice(mallParamter.getTransportationPrice());        //g.setAddedTime(mallParamter.getAddedTime());        //g.setShelvesTime(mallParamter.getShelvesTime());        g.setGoodsOrder(ReBaseGoods.ChangeMall + g.getId());        g.setCommentCount(0);        g.setSalesVolume(0);        g.setIsChecked(false);        g.setIsChange(mallParamter.getIsChange());        g.setStartQuantity(mallParamter.getStartQuantity());        g.setWant(mallParamter.getWant());        if (mallParamter.getIsNoStandard()) {//如果用户勾选了无商品规格，这三个值才有意义；            g.setIsNoStandard(true);            g.setNoStandardPrice(mallParamter.getNoStandardPrice());            g.setNoStandardRepertory(mallParamter.getNoStandardRepertory());            g.setNoStandardRedPaper(mallParamter.getNoStandardRedPaper());            g.setPrice(mallParamter.getNoStandardPrice());            g.setRedPaper(mallParamter.getNoStandardRedPaper());        } else {            g.setIsNoStandard(false);        }        //以下为商城特有字段赋值；    }    @Override    public Map<String, Object> zhiding(HttpServletRequest request, HttpServletResponse response) {        String id = request.getParameter("id");        ReGoodsOfSellerMall mall = reGoodsOfSellerMallDAO.findById(Integer.parseInt(id));        int num = reGoodsOfSellerMallDAO.findMasStickyNum(mall.getSnapshotGoods().getSeller().getId());        mall.setStickyNum(num + 1);        reGoodsOfSellerMallDAO.update(mall);        Map<String, Object> map = new HashMap<String, Object>();        map.put("status", true);        return map;    }    @Override    public PageResult<ReGoodsOfChangeMall> getCheckPageresult(Integer currentPage, Integer pageSize,Integer adminUserId) {        return reGoodsOfChangeMallDAO.getCheckPageresult(currentPage, pageSize,adminUserId);    }    @Override    public Map<String, Object> checkGoods(Integer checkGoodsId, Map<String, Object> returnMap) {        if (checkGoodsId == null) {            returnMap.put("message", "要审核的商品id为空；");        }        ReGoodsOfSellerMall reGoodsOfSellerMall = reGoodsOfSellerMallDAO.findById(checkGoodsId);        reGoodsOfSellerMall.setIsChecked(true);        returnMap.put("message", "审核成功；");        return returnMap;    }    @Override    public ReGoodsOfChangeMall get(Integer checkGoodsId) {        return reGoodsOfChangeMallDAO.findById(checkGoodsId);    }    @Override    public Map<String, Object> doCheck(Map<String, Object> returnMamp, Boolean isPass, String checkDesc, Integer goodsId) throws Exception {    	ReGoodsOfChangeMall reGoodsOfSellerMall = reGoodsOfChangeMallDAO.findById(goodsId);        if (isPass) {            reGoodsOfSellerMall.setIsChecked(true);        } else {            //审核不通过（1，将isChecked设置为null，null表示审核不通过；2，此商品商家不成功，需要更改launchMall字段的值）            reGoodsOfSellerMall.setIsChecked(null);            Integer baseGoodsId = reGoodsOfSellerMall.getBaseGoodsId();            ReGoodsOfBase baseGoods = reGoodsOfBaseDAO.findById(baseGoodsId);            String s = baseGoods.changeLaunchMall(baseGoods.getLaunchMall(), ReGoodsOfBase.changeMall, false);            baseGoods.setLaunchMall(s);        }        reGoodsOfSellerMall.setCheckDesc(checkDesc);        //返回返回值；        returnMamp.put("success", true);        returnMamp.put("message", "操作完成；");        return returnMamp;    }	@Override	public void doSavePut(HttpServletRequest request) throws Exception {		String changeDesc = request.getParameter("changeDesc"); //换货描述		String want=request.getParameter("want"); //想换什么标签		String stock=request.getParameter("stock");//库存		String  standardArray = request.getParameter("standardArray"); //规格详情				String goodsOrder=request.getParameter("goodsOrder");		Integer goodsId=Integer.parseInt(goodsOrder.substring(3,goodsOrder.length()));				ReGoodsOfChangeMall changeMall=null;		ReGoodsOfSellerMall  reGoodsOfSellerMall=null;				changeMall=new ReGoodsOfChangeMall();		reGoodsOfSellerMall = reGoodsOfSellerMallDAO.findById(goodsId);						changeMall.setCreateTime(new Timestamp(System.currentTimeMillis()));		changeMall.setBaseGoodsId(reGoodsOfSellerMall.getBaseGoodsId());		changeMall.setTransportationPrice(0d);		changeMall.setDisplayPrice(reGoodsOfSellerMall.getDisplayPrice());		changeMall.setPrice(reGoodsOfSellerMall.getPrice());		changeMall.setScore(0);		changeMall.setIsValid(true);		changeMall.setSnapshotGoods(reGoodsOfSellerMall.getSnapshotGoods());		changeMall.setAddedTime(new java.sql.Timestamp(System.currentTimeMillis()));		changeMall.setShelvesTime(new Timestamp(DateUtil.addDay2Date(180,new Date()).getTime()));		changeMall.setIsChecked(false);		changeMall.setIsNoStandard(reGoodsOfSellerMall.getIsNoStandard());		changeMall.setNoStandardRepertory(Integer.parseInt(stock));		changeMall.setNoStandardPrice(reGoodsOfSellerMall.getNoStandardPrice());		changeMall.setWant(want);		changeMall.setReGoodsOfSellerMall(reGoodsOfSellerMall);		changeMall.setTransportationType(ReBaseGoods.shuang_fang_xie_shang);		changeMall.setChangeDesc(changeDesc);		changeMall.setPageView(0);				ReGoodsOfBase baseGoods = reGoodsOfBaseDAO.findById(reGoodsOfSellerMall.getBaseGoodsId());				Seller seller = baseGoods.getSeller();		Integer adminUserId = null;		if (seller!=null) {			adminUserId = seller.getAdminUser().getId();		}		if(changeMall.getReGoodsOfSellerMall().getIsNoStandard()){			changeMall.setNoStandardRepertory(Integer.parseInt(stock));		}else{			reGoodsOfBaseService.setStandardDetails(JSONArray.parseArray(standardArray), adminUserId, changeMall);		}						 reGoodsOfChangeMallDAO.saveOrUpdate(changeMall);		 changeMall.setGoodsOrder(ReBaseGoods.ChangeMall+changeMall.getId());		 reGoodsOfChangeMallDAO.merge(changeMall);		 try {			String changeLaunchMall = baseGoods.changeLaunchMall(baseGoods.getLaunchMall(), 7, true);			 baseGoods.setLaunchMall(changeLaunchMall);			 reGoodsOfBaseDAO.update(baseGoods);		} catch (Exception e) {			e.printStackTrace();		}	}}