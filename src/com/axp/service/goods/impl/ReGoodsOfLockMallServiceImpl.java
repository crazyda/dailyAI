package com.axp.service.goods.impl;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.alibaba.fastjson.JSONArray;import com.axp.dao.ReGoodsorderItemDAO;import com.axp.model.AdminUser;import com.axp.model.CashshopTimes;import com.axp.model.CommodityType;import com.axp.model.ReBaseGoods;import com.axp.model.ReGoodsOfBase;import com.axp.model.ReGoodsOfChangeMall;import com.axp.model.ReGoodsOfLockMall;import com.axp.model.ReGoodsOfScoreMall;import com.axp.model.ReGoodsOfSellerMall;import com.axp.model.ReGoodsorderItem;import com.axp.model.Seller;import com.axp.query.PageResult;import com.axp.service.goods.ReGoodsOfBaseService;import com.axp.service.goods.ReGoodsOfChangeMallService;import com.axp.service.goods.ReGoodsOfLockMallService;import com.axp.service.system.UserSystemMessageService;import com.axp.service.system.impl.BaseServiceImpl;import com.axp.util.DateUtil;import com.axp.util.QueryModel;import com.axp.util.StringUtil;import com.push.ImpAppInformation;@Servicepublic class ReGoodsOfLockMallServiceImpl extends BaseServiceImpl implements ReGoodsOfLockMallService {	@Autowired	ReGoodsOfBaseService reGoodsOfBaseService;	@Autowired    UserSystemMessageService userSystemMessageService;	@Override	public void doSavePut(HttpServletRequest request) throws Exception {		String nump = request.getParameter("nump"); //人数		String numscore=request.getParameter("numscore"); //参与积分		String region=request.getParameter("region");//游戏类型		String startedTime = request.getParameter("startedTime");//活动开始时间		String endedTime =request.getParameter("endedTime");//活动结束时间		String  changeDesc = request.getParameter("changeDesc"); //抽奖说明		String goodsOrder=request.getParameter("goodsOrder");		String way = request.getParameter("way");		//倒计时时间范围		String buytimeId =request.getParameter("buytimeId");//倒计时时间范围		Integer goodsId=Integer.parseInt(goodsOrder.substring(3,goodsOrder.length()));				ReGoodsOfLockMall lockMall=null;		ReGoodsOfSellerMall  reGoodsOfSellerMall=null;				lockMall=new ReGoodsOfLockMall();		reGoodsOfSellerMall = reGoodsOfSellerMallDAO.findById(goodsId);						lockMall.setCreateTime(new Timestamp(System.currentTimeMillis()));		lockMall.setBaseGoodsId(reGoodsOfSellerMall.getBaseGoodsId());		lockMall.setTransportationPrice(0d);		lockMall.setScore(Integer.valueOf(numscore));		//		lockMall.setGameType(Integer.valueOf(region));		lockMall.setSnapshotGoods(reGoodsOfSellerMall.getSnapshotGoods());		lockMall.setIsChecked(false);		lockMall.setIsNoStandard(reGoodsOfSellerMall.getIsNoStandard());		lockMall.setReGoodsOfSellerMall(reGoodsOfSellerMall);		lockMall.setTransportationType(ReBaseGoods.bao_you);		lockMall.setLockDesc(changeDesc);		lockMall.setReleaseNum(Integer.valueOf(numscore));		lockMall.setAddedTime(Timestamp.valueOf(startedTime));		lockMall.setShelvesTime(Timestamp.valueOf(endedTime));		lockMall.setEndTime(Timestamp.valueOf(endedTime));		if("265".equals(region)){  //10积分抽奖活动			lockMall.setPeopleNum(Integer.valueOf(nump));			if("1".equals(way)){ //随机码				Integer lotteryYards = Integer.valueOf((int)(Math.random()*100)+""+(int)(Math.random()*Integer.valueOf(nump)));				lockMall.setOpenYards(lotteryYards);			}					}else if("267".equals(region)){ // 倒计时抽奖活动			CashshopTimes times = cashshopTimesDAO.findById(Integer.parseInt(buytimeId));			Set<CashshopTimes> cashtime=  new HashSet<CashshopTimes>();			cashtime.add(times);			lockMall.setTimesId(cashtime);		}		CommodityType commodityType = commodityTypeDAO.findById(Integer.valueOf(region));		lockMall.setCommodityType(commodityType);								ReGoodsOfBase baseGoods = reGoodsOfBaseDAO.findById(reGoodsOfSellerMall.getBaseGoodsId());				Seller seller = baseGoods.getSeller();		Integer adminUserId = null;		if (seller!=null) {			adminUserId = seller.getAdminUser().getId();		}					reGoodsOfLockMallDao.saveOrUpdate(lockMall);		 lockMall.setGoodsOrder(ReBaseGoods.LockMall+lockMall.getId());		 reGoodsOfLockMallDao.merge(lockMall);		 try {			String changeLaunchMall = baseGoods.changeLaunchMall(baseGoods.getLaunchMall(), 8, true);			 baseGoods.setLaunchMall(changeLaunchMall);			 reGoodsOfBaseDAO.update(baseGoods);		} catch (Exception e) {			e.printStackTrace();		}	}		@Override	public PageResult<ReGoodsOfLockMall> getCheckPageresult(			Integer currentPage, Integer pageSize, Integer adminUserId) {		// TODO Auto-generated method stub		 return reGoodsOfLockMallDao.getCheckPageresult(currentPage, pageSize,adminUserId);	}		@Override	public ReGoodsOfLockMall get(Integer checkGoodsId) {				return reGoodsOfLockMallDao.findById(checkGoodsId);	}	/* (non-Javadoc)	 * @see com.axp.service.goods.ReGoodsOfLockMallService#doCheck(java.util.Map, java.lang.Boolean, java.lang.String, java.lang.Integer)	 */	@Override	public Map<String, Object> doCheck(Map<String, Object> returnMamp,			Boolean isPass, String checkDesc, String goodsOrder ) {				ReGoodsOfLockMall reGoodsOfLockMall = reGoodsOfLockMallDao.findByGoodsOrder(goodsOrder);        if (isPass) {        	reGoodsOfLockMall.setIsChecked(true);        	 Date date=DateUtil.addDay2Date(180, new Date());             reGoodsOfLockMall.setShelvesTime(new Timestamp(date.getTime()));        } else {            //审核不通过（1，将isChecked设置为null，null表示审核不通过；2，此商品商家不成功，需要更改launchMall字段的值）        	reGoodsOfLockMall.setIsChecked(null);            Integer baseGoodsId = reGoodsOfLockMall.getBaseGoodsId();            ReGoodsOfBase baseGoods = reGoodsOfBaseDAO.findById(baseGoodsId);            String s = "";			try {				s = baseGoods.changeLaunchMall(baseGoods.getLaunchMall(), ReGoodsOfBase.lockMall, false);			} catch (Exception e) {				// TODO Auto-generated catch block				e.printStackTrace();			}            baseGoods.setLaunchMall(s);        }        reGoodsOfLockMall.setCheckDesc(checkDesc);        //返回返回值；        returnMamp.put("success", true);        returnMamp.put("message", "操作完成；");        return returnMamp;	}		@Override	public Map<String, Object> saveOpenYards(HttpServletRequest request,			String id, String name, String openYards, String openYardsUser,			String salesVolume, String score, String standardDetails) {		//返回值；        Map<String, Object> returnMamp = new HashMap<>();        returnMamp.put("success", true);				ReGoodsOfLockMall reGoodsOfLockMall = reGoodsOfLockMallDao.findById(Integer.valueOf(id));		if(reGoodsOfLockMall == null){			 returnMamp.put("success", false);			 returnMamp.put("message", "访问出错,请重新请求");		}		reGoodsOfLockMall.setSalesVolume(Integer.valueOf(salesVolume));		reGoodsOfLockMall.setOpenYards(Integer.valueOf(openYards));				//参与了活动的用户表,并且标记处谁中奖了,		QueryModel model = new QueryModel();		model.clearQuery();		model.combPreEquals("lotteryYards", Integer.valueOf(openYards));		List<ReGoodsorderItem> orderItems =  dateBaseDao.findLists(ReGoodsorderItem.class, model);		ReGoodsorderItem orderItem = null;		AdminUser adminUser = null ;		if(orderItems != null && orderItems.size() >0){						orderItem = orderItems.get(0); //有用户中奖的,取改用户 标记中奖用户			orderItem.setIsLock(1);						//添加中奖用户			reGoodsorderItemDAO.saveOrUpdate(orderItem);						String title = "中奖提醒";			String message = "用户:"+orderItem.getUser().getRealname()+",获得"+reGoodsOfLockMall.getSnapshotGoods().getName();//						model.clearQuery();			model.combPreEquals("isLock", 1);			List<ReGoodsorderItem> isLockUser =  dateBaseDao.findLists(ReGoodsorderItem.class, model);			List<String> gameBroadContents = new ArrayList<String>();			for(ReGoodsorderItem r : isLockUser){				gameBroadContents.add("恭喜用户:"+r.getUser().getRealname()+"获得"+r.getGoodName());			}						//String message = gameBroadContents.toString();			userSystemMessageService.saveallmessageGame(orderItem.getUser().getId(), null, "15", message, title, request,gameBroadContents);				}else{			adminUserDAO.findById(47); //没有用户中奖就取总部账号		}						reGoodsOfLockMallDao.saveOrUpdate(reGoodsOfLockMall);				returnMamp.put("success", true);		returnMamp.put("message", "添加成功");		return returnMamp;	}		@Override	public Integer findJoinNum(Integer id) {		QueryModel model = new QueryModel();		model.clearQuery();		model.combPreEquals("goodsId", id);		Integer count = dateBaseDao.findCount(ReGoodsorderItem.class, model);		return count;	}}