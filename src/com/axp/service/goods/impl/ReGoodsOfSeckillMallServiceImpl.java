package com.axp.service.goods.impl;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.Date;import java.util.HashSet;import java.util.List;import java.util.Map;import java.util.Set;import javax.servlet.http.HttpServletRequest;import org.springframework.stereotype.Service;import com.axp.model.CashshopTimes;import com.axp.model.ReBaseGoods;import com.axp.model.ReGoodsOfBase;import com.axp.model.ReGoodsOfBaseEditRecord;import com.axp.model.ReGoodsOfSeckillMall;import com.axp.model.ReGoodsOfSellerMall;import com.axp.query.PageResult;import com.axp.service.goods.ReGoodsOfSeckillMallService;import com.axp.service.system.impl.BaseServiceImpl;import com.axp.util.DateUtil;import com.axp.util.StringUtil;@Servicepublic class ReGoodsOfSeckillMallServiceImpl extends BaseServiceImpl implements ReGoodsOfSeckillMallService {    @Override    public void doSave(ReBaseGoods.MallParamter mallParamter) throws Exception {        //确保基础商品为持久化对象；        ReGoodsOfBase goods = reGoodsOfBaseDAO.findById(mallParamter.getBaseGoods().getId());        //判断是第一次投放，还是编辑投放操作；        ReGoodsOfSeckillMall g;        String goodsOrder = mallParamter.getGoodsOrder();        if (StringUtil.hasLength(goodsOrder) && goodsOrder.startsWith(ReBaseGoods.SeckillMall)) {            g = (ReGoodsOfSeckillMall) reBaseGoodsDAO.getMallObjByGoodsOrder(goodsOrder);        } else {            List<ReGoodsOfSeckillMall> list = reGoodsOfSeckillMallDAO.getGoodsByBaseGoodsId(goods.getId());            if (list == null || list.size() == 0) {                g = new ReGoodsOfSeckillMall();            } else if (list.size() == 1) {                g = list.get(0);            } else {                throw new Exception("数据库数据错误：在秒杀商城中，相同的基础商品出现了多条记录，基础商品id值为：" + goods.getId());            }        }        //保存商城操作；        reGoodsOfSeckillMallDAO.save(g);//为了获取id值，必须做两次保存；        g.setBaseGoodsId(goods.getId());        g.setSnapshotGoods(mallParamter.getSnapshotGoods());        g.setStandardDetails(mallParamter.getStandardDetails());        g.setDisplayPrice(mallParamter.getDisplayPrice());        g.setPrice(mallParamter.getPrice());        g.setCreateTime(new Timestamp(System.currentTimeMillis()));        g.setTransportationType(mallParamter.getTransportationType());        g.setTransportationPrice(mallParamter.getTransportationPrice());        g.setAddedTime(mallParamter.getAddedTime());        g.setShelvesTime(mallParamter.getShelvesTime());        g.setGoodsOrder(ReBaseGoods.SeckillMall + g.getId());        g.setCommentCount(0);                List<ReGoodsOfBaseEditRecord> editRecordList = reGoodsOfBaseEditRecordDao.findByProperty("reGoodsOfBase.id",goods.getId());        //重新上架 销量不清零        if(editRecordList.size()>0){        	g.setSalesVolume(editRecordList.get(0).getSeckillMallSalesVolume());        }else{        	g.setSalesVolume(0);        }        g.setIsChecked(false);        if (mallParamter.getIsNoStandard()) {//如果用户勾选了无商品规格，这三个值才有意义；            g.setIsNoStandard(true);            g.setNoStandardPrice(mallParamter.getNoStandardPrice());            g.setNoStandardRepertory(mallParamter.getNoStandardRepertory());            g.setPrice(mallParamter.getNoStandardPrice());        } else {            g.setIsNoStandard(false);        }        //以下为商城特有字段赋值；        g.setSeckillCountLimit(mallParamter.getSeckillCountLimit());        g.setSeckillArea(mallParamter.getSeckillArea());        g.setSeckillDesc(mallParamter.getSeckillDesc());        List<CashshopTimes> list = cashshopTimesDAO.searchCashshopTimesByIds(mallParamter.getTimesList());        Set<CashshopTimes> map = new HashSet<>();        for (CashshopTimes each : list) {            map.add(each);        }        g.setTimes(map);    }    @Override	public void doSavePut(HttpServletRequest request) throws Exception {    	String price = request.getParameter("price");		String stock = request.getParameter("stock");		String secondskilltimeId =request.getParameter("secondskilltimeId");//秒杀时段		String startedTime = request.getParameter("startedTime");//活动开始时间		String endedTime =request.getParameter("endedTime");//活动结束时间		String goodsOrder = request.getParameter("goodsOrder");//周边店铺数据		ReGoodsOfSeckillMall goodsOfSeckillMall = null;		ReGoodsOfSellerMall goodsOfSellerMall = null;		String str = goodsOrder.substring(0,3);//商品id前缀		if (!str.equals("sem")) {			String goodsId = goodsOrder.substring(3,goodsOrder.length());			goodsOfSeckillMall = reGoodsOfSeckillMallDAO.findById(Integer.parseInt(goodsId));			goodsOfSellerMall = goodsOfSeckillMall.getReGoodsOfSellerMall();		}else{			 String sellerMallId=goodsOrder.substring(3,goodsOrder.length());//周边店铺数据id			 goodsOfSeckillMall = new ReGoodsOfSeckillMall();			 goodsOfSellerMall = reGoodsOfSellerMallDAO.findById(Integer.parseInt(sellerMallId));		}				CashshopTimes times = cashshopTimesDAO.findById(Integer.parseInt(secondskilltimeId));		Set<CashshopTimes> cashtime=  new HashSet<CashshopTimes>();		cashtime.add(times);		 		if (goodsOfSellerMall!=null) {						goodsOfSeckillMall.setNoStandardPrice(Double.valueOf(price));			goodsOfSeckillMall.setPrice(Double.valueOf(price));			goodsOfSeckillMall.setReleaseNum(Integer.parseInt(stock));			goodsOfSeckillMall.setDisplayPrice(goodsOfSellerMall.getDisplayPrice());			goodsOfSeckillMall.setTransportationType(goodsOfSellerMall.getTransportationType());			SimpleDateFormat sf = new SimpleDateFormat("yyyy-MM-dd");			Date d = sf.parse(startedTime);			Date d2 = sf.parse(endedTime);		    goodsOfSeckillMall.setAddedTime(new Timestamp(d.getTime()));		    goodsOfSeckillMall.setShelvesTime(new Timestamp(d2.getTime()));		    goodsOfSeckillMall.setBaseGoodsId(goodsOfSellerMall.getBaseGoodsId());		    goodsOfSeckillMall.setIsValid(true);		    goodsOfSeckillMall.setCreateTime(new java.sql.Timestamp(System.currentTimeMillis()));		    goodsOfSeckillMall.setReGoodsOfSellerMall(goodsOfSellerMall);		    goodsOfSeckillMall.setStandardDetails(goodsOfSellerMall.getStandardDetails());		    goodsOfSeckillMall.setTimes(cashtime);		    goodsOfSeckillMall.setNoStandardPrice(goodsOfSeckillMall.getNoStandardPrice());		    goodsOfSeckillMall.setNoStandardRepertory(goodsOfSellerMall.getNoStandardRepertory());		    goodsOfSeckillMall.setNoStandardScore(goodsOfSellerMall.getNoStandardScore());		    goodsOfSeckillMall.setIsNoStandard(goodsOfSellerMall.getIsNoStandard());		    goodsOfSeckillMall.setIsChecked(false);		    goodsOfSeckillMall.setStandardDetails(goodsOfSellerMall.getStandardDetails());		    goodsOfSeckillMall.setSnapshotGoods(goodsOfSellerMall.getSnapshotGoods());		    goodsOfSeckillMall.setRightsProtect(goodsOfSellerMall.getRightsProtect());			reGoodsOfSeckillMallDAO.saveOrUpdate(goodsOfSeckillMall);												goodsOfSeckillMall.setGoodsOrder(ReBaseGoods.SeckillMall+goodsOfSeckillMall.getId());			reGoodsOfSeckillMallDAO.update(goodsOfSeckillMall);												ReGoodsOfBase baseGoods = reGoodsOfBaseDAO.findById(goodsOfSellerMall.getBaseGoodsId());			 try {				String changeLaunchMall = baseGoods.changeLaunchMall(baseGoods.getLaunchMall()==null?"00000000":baseGoods.getLaunchMall(), 3, true);				baseGoods.setLaunchMall(changeLaunchMall);				reGoodsOfBaseDAO.update(baseGoods);			} catch (Exception e) {				e.printStackTrace();			}		}			}    @Override    public PageResult<ReGoodsOfSeckillMall> getCheckPageresult(Integer currentPage, Integer pageSize,Integer adminUserId) {        return reGoodsOfSeckillMallDAO.getCheckPageresult(currentPage, pageSize,adminUserId);    }    @Override    public ReGoodsOfSeckillMall get(Integer checkGoodsId) {        return reGoodsOfSeckillMallDAO.findById(checkGoodsId);    }    @Override    public Map<String, Object> doCheck(Map<String, Object> returnMamp, Boolean isPass, String checkDesc, Integer goodsId) throws Exception {        ReGoodsOfSeckillMall reGoodsOfSeckillMall = reGoodsOfSeckillMallDAO.findById(goodsId);        if (isPass) {            reGoodsOfSeckillMall.setIsChecked(true);            Date date=DateUtil.addDay2Date(180, new Date());            reGoodsOfSeckillMall.setShelvesTime(new Timestamp(date.getTime()));        } else {            //审核不通过（1，将isChecked设置为null，null表示审核不通过；2，此商品商家不成功，需要更改launchMall字段的值）            reGoodsOfSeckillMall.setIsChecked(null);            Integer baseGoodsId = reGoodsOfSeckillMall.getBaseGoodsId();            ReGoodsOfBase baseGoods = reGoodsOfBaseDAO.findById(baseGoodsId);            String s = baseGoods.changeLaunchMall(baseGoods.getLaunchMall(), ReGoodsOfBase.seckillMall, false);            baseGoods.setLaunchMall(s);        }        reGoodsOfSeckillMall.setCheckDesc(checkDesc);        //返回返回值；        returnMamp.put("success", true);        returnMamp.put("message", "操作完成；");        return returnMamp;    }	}