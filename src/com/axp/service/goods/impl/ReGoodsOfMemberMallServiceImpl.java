package com.axp.service.goods.impl;import java.sql.Timestamp;import java.util.List;import java.util.Map;import org.springframework.stereotype.Service;import com.axp.model.ReBaseGoods;import com.axp.model.ReGoodsOfBase;import com.axp.model.ReGoodsOfMemberMall;import com.axp.query.PageResult;import com.axp.service.goods.ReGoodsOfMemberMallService;import com.axp.service.system.impl.BaseServiceImpl;import com.axp.util.StringUtil;@Servicepublic class ReGoodsOfMemberMallServiceImpl extends BaseServiceImpl implements ReGoodsOfMemberMallService {    @Override    public void doSave(ReBaseGoods.MallParamter mallParamter) throws Exception {        //确保基础商品为持久化对象；        ReGoodsOfBase goods = reGoodsOfBaseDAO.findById(mallParamter.getBaseGoods().getId());        //判断是第一次投放，还是编辑投放操作；        ReGoodsOfMemberMall g;        String goodsOrder = mallParamter.getGoodsOrder();        if (StringUtil.hasLength(goodsOrder) && goodsOrder.startsWith(ReBaseGoods.MemberMall)) {            g = (ReGoodsOfMemberMall) reBaseGoodsDAO.getMallObjByGoodsOrder(goodsOrder);        } else {            List<ReGoodsOfMemberMall> list = reGoodsOfMemberMallDAO.getGoodsByBaseGoodsId(goods.getId());            if (list == null || list.size() == 0) {                g = new ReGoodsOfMemberMall();            } else if (list.size() == 1) {                g = list.get(0);            } else {                throw new Exception("数据库数据错误：在会员免单商城中，相同的基础商品出现了多条记录，基础商品id值为：" + goods.getId());            }        }        //保存商城操作；        reGoodsOfMemberMallDAO.save(g);//为了获取id值，必须做两次保存；        g.setDisplayPrice(mallParamter.getDisplayPrice());        g.setBaseGoodsId(goods.getId());        g.setSnapshotGoods(mallParamter.getSnapshotGoods());        g.setStandardDetails(mallParamter.getStandardDetails());        g.setCreateTime(new Timestamp(System.currentTimeMillis()));        g.setTransportationType(mallParamter.getTransportationType());        g.setTransportationPrice(mallParamter.getTransportationPrice());        g.setAddedTime(mallParamter.getAddedTime());        g.setShelvesTime(mallParamter.getShelvesTime());        g.setGoodsOrder(ReBaseGoods.MemberMall + g.getId());        g.setCommentCount(0);        g.setSalesVolume(0);        g.setIsChecked(false);        if (mallParamter.getIsNoStandard()) {//如果用户勾选了无商品规格，这三个值才有意义；            g.setIsNoStandard(true);            g.setNoStandardRepertory(mallParamter.getNoStandardRepertory());        } else {            g.setIsNoStandard(false);        }        //以下为商城特有字段赋值；    }    @Override    public PageResult<ReGoodsOfMemberMall> getCheckPageresult(Integer currentPage, Integer pageSize) {        return reGoodsOfMemberMallDAO.getCheckPageresult(currentPage, pageSize);    }    @Override    public Map<String, Object> doCheck(Map<String, Object> returnMamp, Boolean isPass, String checkDesc, Integer goodsId) throws Exception {        ReGoodsOfMemberMall reGoodsOfMemberMall = reGoodsOfMemberMallDAO.findById(goodsId);        if (isPass) {            reGoodsOfMemberMall.setIsChecked(true);        } else {            //审核不通过（1，将isChecked设置为null，null表示审核不通过；2，此商品商家不成功，需要更改launchMall字段的值）            reGoodsOfMemberMall.setIsChecked(null);            Integer baseGoodsId = reGoodsOfMemberMall.getBaseGoodsId();            ReGoodsOfBase baseGoods = reGoodsOfBaseDAO.findById(baseGoodsId);            String s = baseGoods.changeLaunchMall(baseGoods.getLaunchMall(), ReGoodsOfBase.memberMall, false);            baseGoods.setLaunchMall(s);        }        reGoodsOfMemberMall.setCheckDesc(checkDesc);        //返回返回值；        returnMamp.put("success", true);        returnMamp.put("message", "操作完成；");        return returnMamp;    }    @Override    public ReGoodsOfMemberMall get(Integer checkGoodsId) {        return reGoodsOfMemberMallDAO.findById(checkGoodsId);    }}