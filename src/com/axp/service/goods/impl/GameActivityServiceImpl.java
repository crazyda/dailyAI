package com.axp.service.goods.impl;import java.sql.Timestamp;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.interceptor.TransactionAspectSupport;import com.alibaba.fastjson.JSONArray;import com.alibaba.fastjson.JSONObject;import com.axp.dao.AdminUserDAO;import com.axp.dao.ReGoodsorderItemDAO;import com.axp.model.AdminUser;import com.axp.model.CommodityType;import com.axp.model.GameActivity;import com.axp.model.OrderComment;import com.axp.model.ReBaseGoods;import com.axp.model.ReGoodsOfBase;import com.axp.model.ReGoodsOfChangeMall;import com.axp.model.ReGoodsOfLockMall;import com.axp.model.ReGoodsOfScoreMall;import com.axp.model.ReGoodsOfSellerMall;import com.axp.model.ReGoodsorder;import com.axp.model.ReGoodsorderItem;import com.axp.model.Scoretypes;import com.axp.model.Seller;import com.axp.model.UserDarw;import com.axp.query.PageResult;import com.axp.service.goods.GameActivityService;import com.axp.service.goods.ReGoodsOfBaseService;import com.axp.service.goods.ReGoodsOfChangeMallService;import com.axp.service.goods.ReGoodsOfLockMallService;import com.axp.service.system.AdminUserService;import com.axp.service.system.UserSystemMessageService;import com.axp.service.system.impl.BaseServiceImpl;import com.axp.util.DateUtil;import com.axp.util.PageInfo;import com.axp.util.QueryModel;import com.axp.util.StringUtil;import com.axp.util.Utility;import com.push.ImpAppInformation;@Servicepublic class GameActivityServiceImpl extends BaseServiceImpl implements  GameActivityService {	@Autowired	public AdminUserService adminUserService;		@Override	public PageResult<GameActivity> getAvtivityForList(Integer currentPage,			Integer pageSize, String searchWord) {		return gameActivityDAO.getAvtivityForList( currentPage, pageSize,searchWord);	}		@Override	public Map<String, Object> saveDrawinfo( List<String> contents,HttpServletRequest request,			HttpServletResponse response) {		String drawType = request.getParameter("drawType");		String score =request.getParameter("score");		String  chance = request.getParameter("chance"); //中奖概率		String goodsOrder=request.getParameter("goodsOrder");		String content = request.getParameter("contents");		String seller_id = request.getParameter("seller_id");		String status = request.getParameter("status");				contents = new ArrayList<String>();		contents.add(content);		Map<String,Object> statMap = new HashMap<String,Object>();		try {			GameActivity activity = new GameActivity();			activity.setContent(content);			if("18".equals(drawType)){ // 积分奖项				activity.setScore(Integer.valueOf(score));			}else if("19".equals(drawType)){ //商品作为奖项的				ReGoodsOfSellerMall reGoodsOfSellerMall = reGoodsOfSellerMallDAO.findById(Integer.valueOf(goodsOrder));				activity.setReGoodsOfSellerMall(reGoodsOfSellerMall);			}else if("20".equals(drawType)){ //伪奖品,谢谢惠顾				//activity.setScore(Integer.valueOf(score));			}						activity.setCommodityType(commodityTypeDAO.findById(266));			activity.setChanceScore(Double.valueOf(chance));			activity.setCreateTime(new Timestamp(System.currentTimeMillis()));			activity.setDrawYlassify( scoreTypeDAO.findById(Integer.valueOf(drawType)));			activity.setIsValid(true);			gameActivityDAO.save(activity);			statMap.put("result", "保存成功");		} catch (NumberFormatException e) {			// TODO Auto-generated catch block			e.printStackTrace();			statMap.put("result", "保存失败");		}						return statMap;	}	@Override	public GameActivity findById(Integer id) {				return gameActivityDAO.findById(id);	}	@Override	public void getGameList(AdminUser adminUser, HttpServletRequest request,			Integer currentPage) {		//tab 切换的 status =0 签到 1幸运抽奖 		Integer status = request.getParameter("status")==null?0:Integer.parseInt(request.getParameter("status"));		String pagestr = request.getParameter("page");//页码		QueryModel queryModel = new QueryModel();		queryModel.clearQuery();		queryModel.combPreEquals("isValid", true);		if(status==0){ //签到商品 268			if(adminUser.getLevel() != 95){								queryModel.combPreEquals("adminUser.id", adminUser.getId(),"adminUserId");			}			queryModel.combPreEquals("commodityType.id",268,"gameType" );		}else if(status == 1){			queryModel.combPreEquals("commodityType.id",266,"gameType" );		}		PageInfo pageInfo = new PageInfo();		Integer count = 0;		count = dateBaseDao.findCount(GameActivity.class, queryModel);		Utility utility = new Utility();		utility.setPageInfomation(pageInfo,pagestr, "10",count);		int start = pageInfo.getCurrentPage() * pageInfo.getPageSize();		int end = pageInfo.getPageSize();		List<GameActivity> gameLists = dateBaseDao.findPageList(GameActivity.class, queryModel, start, end);				if (status==null) {			pageInfo.setParam("&status=10"+"&page=");		}else{			pageInfo.setParam("&status="+status+"&page=");		}		request.setAttribute("pageFoot", pageInfo.getCommonDefaultPageFootView());		request.setAttribute("page", pagestr);		request.setAttribute("count", count);		request.setAttribute("gameLists", gameLists);		request.setAttribute("status", status);		}	@Override	public void saveSignInfo(HttpServletRequest request,			HttpServletResponse response, List<String> coverPics,			List<String> content) {	        //检查用户是否存在；        Integer adminUserId = (Integer) request.getSession().getAttribute("currentUserId");        AdminUser adminUser = adminUserService.findById(adminUserId);		String score1 = request.getParameter("score1");		String score2 = request.getParameter("score2");		String score3 = request.getParameter("score3");		String score4 = request.getParameter("score4");		String score5 = request.getParameter("score5");		String score6 = request.getParameter("score6");		String score7 = request.getParameter("score7");		String score8 = request.getParameter("score8");		String details = request.getParameter("details");		String status = request.getParameter("status");		String sellerId = request.getParameter("sellerId");		String gameId = request.getParameter("gameId");		AdminUser seller = adminUserService.findById(Integer.valueOf(sellerId));		GameActivity game = new GameActivity();		if(gameId != "" ){			game = gameActivityDAO.findById(Integer.valueOf(gameId));		}		//保存5张图片		if(coverPics != null && coverPics.size()>0){						List<Map<String, Object>> coverList = new ArrayList<>();			for (int i = 0; i < coverPics.size(); i++) {				String each = coverPics.get(i).replaceAll("\\\\", "/");				if (StringUtil.hasLength(each)) {					Map<String, Object> map = new HashMap<>();					map.put("imgUrl", each);					coverList.add(map);				}			}			game.setCoverPics(JSONObject.toJSONString(coverList));		}		if(content != null && content.size()>0){						//保存商品简述的五张图片；			List<Map<String, Object>> imgList = new ArrayList<>();			for (int i = 0; i < content.size(); i++) {				String each = content.get(i).replaceAll("\\\\", "/");				if (StringUtil.hasLength(each)) {					Map<String, Object> map = new HashMap<>();					map.put("imgUrl", each);					imgList.add(map);				}			}			game.setContent(JSONObject.toJSONString(imgList));		}		game.setCreateTime(new Timestamp(System.currentTimeMillis()));		//保存每天的积分		String score = score1 +"-"+score2+"-"+score3+"-"+score4+"-"+score5+"-"+score6+"-"+score7+"-"+score8;		game.setOneScore(score);		game.setIsStart(true);		game.setIsValid(true);		game.setDetail(details);		game.setSeller(seller);		CommodityType commodityType =commodityTypeDAO.findById(Integer.valueOf(status));		game.setCommodityType(commodityType);		game.setProvinceEnum(adminUser.getProvinceEnum());		game.setAdminUser(adminUser);		gameActivityDAO.saveOrUpdate(game);					}	@Override	public int delSign(Integer id) {		GameActivity gameActivity = gameActivityDAO.findById(id);		if(gameActivity!= null){			gameActivity.setIsValid(false);			gameActivity.setIsStart(false);			gameActivityDAO.saveOrUpdate(gameActivity);			return 1;		}else{						return 0;		}			}								}