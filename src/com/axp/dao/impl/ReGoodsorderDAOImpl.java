package com.axp.dao.impl;import java.text.DateFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.apache.commons.lang.StringUtils;import org.hibernate.Query;import org.hibernate.SQLQuery;import org.hibernate.Session;import org.springframework.stereotype.Repository;import com.alipay.api.domain.Data;import com.axp.dao.ReGoodsorderDAO;import com.axp.model.AdminUser;import com.axp.model.ReBaseGoods;import com.axp.model.ReGoodsOfBase;import com.axp.model.ReGoodsOfLocalSpecialtyMall;import com.axp.model.ReGoodsOfMemberMall;import com.axp.model.ReGoodsOfScoreMall;import com.axp.model.ReGoodsOfSeckillMall;import com.axp.model.ReGoodsOfSellerMall;import com.axp.model.ReGoodsorder;import com.axp.model.ReGoodsorderItem;import com.axp.query.PageResult;import com.axp.util.DateUtil;import com.axp.util.QueryModel;import com.axp.util.StringUtil;import com.sun.jmx.snmp.Timestamp;@Repositorypublic class ReGoodsorderDAOImpl extends BaseDaoImpl<ReGoodsorder> implements ReGoodsorderDAO {    @Override    public List<ReGoodsorder> getListOfAdminUser(AdminUser adminUser,StringBuffer condition, Integer currentPage, Integer pageSize) {        Session session = sessionFactory.getCurrentSession();        Query query = session.createQuery("from ReGoodsorder where "+condition+" and isValid=1 and seller.adminUser=:adminUser order by id desc ");        query.setParameter("adminUser", adminUser).setMaxResults(pageSize).setFirstResult((currentPage - 1) * pageSize);        return query.list();    }    @Override    public Long getCountOfAdminUser(AdminUser adminUser) {        Session session = sessionFactory.getCurrentSession();        Query query = session.createQuery(" select count(r) from ReGoodsorder r where r.isValid=1 and r.seller.adminUser=:adminUser");        return (Long) query.setParameter("adminUser", adminUser).uniqueResult();    }    @Override    public List<ReGoodsorder> getListOfSuperAdmin(AdminUser adminUser,StringBuffer condition, Integer currentPage, Integer pageSize) {        Session session = sessionFactory.getCurrentSession();        Query query = session.createQuery("from ReGoodsorder where "+condition+" and isValid=1 order by id desc ").setMaxResults(pageSize).setFirstResult((currentPage - 1) * pageSize);        return query.list();    }    @Override    public Long getCountOfSuperAdmin(AdminUser adminUser) {        Session session = sessionFactory.getCurrentSession();        Query query = session.createQuery(" select count(r) from ReGoodsorder r where r.isValid=1");        return (Long) query.uniqueResult();    }        public List<Integer> getOrderIdByItemName(String goodsName){    	Session session = sessionFactory.getCurrentSession();    	Query query = session.createQuery("select distinct item.order.id from ReGoodsorderItem item where item.goodName like '%"+goodsName+"%'");    	return query.list();        }	@Override	public PageResult<ReGoodsorderItem> getOrderSales(HttpServletRequest request, String mallType,Integer currentPage,Integer pageSize,String sTM,String eTM) {		Session session=sessionFactory.getCurrentSession();		SQLQuery createSQLQuery = session.createSQLQuery("select (SELECT count(*) FROM	re_goodsorder goods	" +				"INNER JOIN re_goodsorder_item item ON goods.id = item.order_id WHERE goods.isvalid = 1 AND item.isvalid = 1 AND item.mall_class IN ("+mallType+") "						+ "AND goods.createTime>=? and goods.createTime<=? AND goods. STATUS != 0 AND goods. STATUS !=- 1) count " +				", item.good_name as '商品名称',item.good_quantity as '购买量',item.pay_price as '单价',item.mall_id as '商城id'," +				"item.createtime,item.mall_class,goods.id,item.id as itemId  from re_goodsorder goods inner join re_goodsorder_item item on goods.id=item.order_id " +				"where  goods.isvalid=1 and item.isvalid=1 and item.mall_class in ("+mallType+")  " +				"and   goods.createTime>=? and goods.createTime<=? " +				"and goods.status!=0  " +				"and goods.status!=-1 group by item.id order by item.id desc  " +				"limit ?,?  "				);		createSQLQuery.setParameter(0, sTM);		createSQLQuery.setParameter(1, eTM);		createSQLQuery.setParameter(2, sTM);		createSQLQuery.setParameter(3, eTM);		createSQLQuery.setParameter(4, ((currentPage-1)*pageSize));		createSQLQuery.setParameter(5, pageSize);		List<Object[]> list = createSQLQuery.list();				List<ReGoodsorderItem> listGoods=new ArrayList<ReGoodsorderItem>();				for (Object[] obj : list) {			ReGoodsorderItem g=new ReGoodsorderItem();			g.setGoodName(obj[1].toString());			g.setGoodQuantity(Integer.parseInt(obj[2].toString()));			g.setPayPrice(Double.valueOf(obj[3].toString()));			g.setMallId(Integer.parseInt(obj[4].toString()));			g.setMallClass(obj[6].toString());			ReGoodsorder o=new ReGoodsorder();			o.setId(Integer.parseInt(obj[7].toString()));			g.setOrder(o);			g.setId(Integer.parseInt(obj[8].toString()));			SimpleDateFormat sf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");			Date d=null;			try {				d= sf.parse(obj[5].toString());			} catch (ParseException e) {				e.printStackTrace();			}			g.setCreateTime(new java.sql.Timestamp(d.getTime()));						listGoods.add(g);		}				Integer count=0;		if(list.size()>0){			request.setAttribute("count", list.get(0)[0]);			 count=Integer.parseInt(list.get(0)[0].toString());		}		if(mallType.indexOf(",")!=-1){			mallType="2";		}else{			mallType="1";		}		request.setAttribute("mallType", mallType);		PageResult<ReGoodsorderItem> result=new PageResult<>(count,pageSize,currentPage,listGoods);		return result;	}	@Override	public List<ReGoodsOfScoreMall> getScoreList(HttpServletRequest request, HttpServletResponse response) {		Session session = sessionFactory.getCurrentSession();		String sellerName = request.getParameter("sellerName");		StringBuffer sb = new StringBuffer();		if (StringUtils.isNotBlank(sellerName)) {			sb.append(" and snapshotGoods.seller.name='").append(sellerName).append("'");		}		Query query = session.createQuery("from ReGoodsOfScoreMall a where isValid=1"+sb);		return query.list();	}	@Override	public List<ReGoodsOfLocalSpecialtyMall> getLocalList(HttpServletRequest request, HttpServletResponse response) {		Session session = sessionFactory.getCurrentSession();		String sellerName = request.getParameter("sellerName");		StringBuffer sb = new StringBuffer();		if (StringUtils.isNotBlank(sellerName)) {			sb.append(" and snapshotGoods.seller.name='").append(sellerName).append("'");		}		Query query = session.createQuery("from ReGoodsOfLocalSpecialtyMall a where isValid=1"+sb);		return query.list();	}	@Override	public List<ReGoodsOfSellerMall> getSellerList(HttpServletRequest request, HttpServletResponse response) {		Session session = sessionFactory.getCurrentSession();		String sellerName = request.getParameter("sellerName");		StringBuffer sb = new StringBuffer();		if (StringUtils.isNotBlank(sellerName)) {			sb.append(" and snapshotGoods.seller.name='").append(sellerName).append("'");		}		Query query = session.createQuery("from ReGoodsOfSellerMall a where isValid=1"+sb);		return query.list();	}	@Override	public List<ReGoodsOfSeckillMall> getSeckillList(HttpServletRequest request, HttpServletResponse response) {		Session session = sessionFactory.getCurrentSession();		String sellerName = request.getParameter("sellerName");		StringBuffer sb = new StringBuffer();		if (StringUtils.isNotBlank(sellerName)) {			sb.append(" and snapshotGoods.seller.name='").append(sellerName).append("'");		}		Query query = session.createQuery("from ReGoodsOfSeckillMall a where isValid=1"+sb);		return query.list();	}		@Override	public PageResult<ReGoodsorder> getLockUser(Integer currentPage,			int pagesize, String typeId) {		 Session session = sessionFactory.getCurrentSession();	        //先获取查询条件；	        String queryCount = "";	        String queryList = "";         queryCount = "select count(r) from ReGoodsorder r where r.isValid=1 and r.isGame=1 ";         queryList = "from ReGoodsorder r where  r.isValid=1 and r.isGame=1  order by id desc";     	        //先查询总条数；	        Query query1 = session.createQuery(queryCount);	        Long count = (Long) query1.uniqueResult();	        //计算当前页的数据；	        Query query2 = session.createQuery(queryList).setFirstResult((currentPage - 1) * pagesize)	                .setMaxResults(pagesize);	        List<ReGoodsorder> list = query2.list();	        //返回结果；	        return new PageResult<>(Integer.parseInt(count.toString()), pagesize, currentPage, list);	}}