package com.axp.dao.impl;import java.util.List;import javax.annotation.Resource;import org.apache.commons.lang.StringUtils;import org.hibernate.Query;import org.hibernate.Session;import org.springframework.stereotype.Repository;import com.axp.dao.ReBaseGoodsDAO;import com.axp.dao.ReGoodsOfTeamMallDao;import com.axp.model.ReBaseGoods;import com.axp.model.ReGoodsOfBase;import com.axp.model.ReGoodsOfChangeMall;import com.axp.model.ReGoodsOfLocalSpecialtyMall;import com.axp.model.ReGoodsOfLockMall;import com.axp.model.ReGoodsOfMemberMall;import com.axp.model.ReGoodsOfNineNineMall;import com.axp.model.ReGoodsOfScoreMall;import com.axp.model.ReGoodsOfSeckillMall;import com.axp.model.ReGoodsOfSellerMall;import com.axp.model.ReGoodsOfTeamMall;@Repositorypublic class ReBaseGoodsDAOImpl extends BaseDaoImpl<ReBaseGoods> implements ReBaseGoodsDAO {		@Resource	ReGoodsOfTeamMallDao reGoodsOfTeamMallDao;    @Override    public <T> T getMallObjByBaseGoods(ReGoodsOfBase baseGoods, Class<T> clazz) {        Session session = sessionFactory.getCurrentSession();        //拼接查询条件；        String mallName = "";        String queryString = "from ";        if (clazz == ReGoodsOfSellerMall.class) {            queryString += "ReGoodsOfSellerMall";            mallName = "周边店铺";        } else if (clazz == ReGoodsOfScoreMall.class) {            queryString += "ReGoodsOfScoreMall";            mallName = "积分兑换";        } else if (clazz == ReGoodsOfSeckillMall.class) {            queryString += "ReGoodsOfSeckillMall";            mallName = "限时秒杀";        } else if (clazz == ReGoodsOfLocalSpecialtyMall.class) {            queryString += "ReGoodsOfLocalSpecialtyMall";            mallName = "总部商城";        } else if (clazz == ReGoodsOfNineNineMall.class) {            queryString += "ReGoodsOfNineNineMall";            mallName = "99特惠";        } else if (clazz == ReGoodsOfMemberMall.class) {            queryString += "ReGoodsOfMemberMall";            mallName = "免单专区";        }else if (clazz == ReGoodsOfChangeMall.class) {            queryString += "ReGoodsOfChangeMall";            mallName = "换货专区";        }else if(clazz == ReGoodsOfTeamMall.class){        	queryString+= "ReGoodsOfTeamMall";        	mallName = "拼团商城";        }else if(clazz == ReGoodsOfLockMall.class){        	queryString+= "ReGoodsOfLockMall";        	mallName = "游戏商城";        }                queryString += " where isValid=1 and baseGoodsId=" + baseGoods.getId();        	                Query query = session.createQuery(queryString);        List<T> list = query.list();        if (list != null && list.size() == 1) {            return list.get(0);        } else if (list == null || list.size() == 0) {            System.out.println("错误数据：商品并未在" + mallName + "上架；");            return null;        } else {            throw new RuntimeException("错误数据：" + mallName + "列表中，有一个以上的商品对应同一个基础商品对象，其id值为" + baseGoods.getId() + "；");        }    }    @Override    public Object getMallObjByGoodsOrder(String goodsOrder) throws Exception {        Session session = sessionFactory.getCurrentSession();        //拼接查询条件；        String queryString = "from ";        if (goodsOrder.startsWith(ReBaseGoods.SellerMall)) {            queryString += "ReGoodsOfSellerMall";        } else if (goodsOrder.startsWith(ReBaseGoods.ScoreMall)) {            queryString += "ReGoodsOfScoreMall";        } else if (goodsOrder.startsWith(ReBaseGoods.SeckillMall)) {            queryString += "ReGoodsOfSeckillMall";        } else if (goodsOrder.startsWith(ReBaseGoods.LocalSpecialtyMall)) {            queryString += "ReGoodsOfLocalSpecialtyMall";        } else if (goodsOrder.startsWith(ReBaseGoods.NineNineMall)) {            queryString += "ReGoodsOfNineNineMall";        } else if (goodsOrder.startsWith(ReBaseGoods.MemberMall)) {            queryString += "ReGoodsOfMemberMall";        }else if (goodsOrder.startsWith(ReBaseGoods.ChangeMall)) {            queryString += "ReGoodsOfChangeMall";        }else if(goodsOrder.startsWith(ReBaseGoods.teamMall)){        	 queryString += "ReGoodsOfTeamMall";        }else if(goodsOrder.startsWith(ReBaseGoods.LockMall)){        	queryString += "ReGoodsOfLockMall";        }        queryString += " where isValid=1 and id=" + goodsOrder.substring(3);        Query query = session.createQuery(queryString);        List list = query.list();        if (list != null && list.size() == 1) {            return list.get(0);        }        if (list != null && list.size() > 1) {            throw new Exception("通过当前的goodsOrder：" + goodsOrder + "找到了多个对象；");        }        return null;    }            @Override    public void addGoodsSalesVolume(String goodsOrder,Integer amount) throws Exception{    	    	ReBaseGoods good = (ReBaseGoods)getMallObjByGoodsOrder(goodsOrder);    	    	if(good==null){    		return;    	}    	    	//拼接查询条件；        String claze = "";        String mallGoodsId = goodsOrder.substring(3);        if (goodsOrder.startsWith(ReBaseGoods.SellerMall)) {        	claze = "ReGoodsOfSellerMall";        } else if (goodsOrder.startsWith(ReBaseGoods.ScoreMall)) {        	claze = "ReGoodsOfScoreMall";        } else if (goodsOrder.startsWith(ReBaseGoods.SeckillMall)) {        	claze = "ReGoodsOfSeckillMall";        } else if (goodsOrder.startsWith(ReBaseGoods.LocalSpecialtyMall)) {        	claze = "ReGoodsOfLocalSpecialtyMall";        } else if (goodsOrder.startsWith(ReBaseGoods.NineNineMall)) {        	claze = "ReGoodsOfNineNineMall";        } else if (goodsOrder.startsWith(ReBaseGoods.MemberMall)) {        	claze = "ReGoodsOfMemberMall";        }else if (goodsOrder.startsWith(ReBaseGoods.ChangeMall)) {        	claze = "ReGoodsOfChangeMall";        }else if (goodsOrder.startsWith(ReBaseGoods.teamMall)) {        	claze = "ReGoodsOfTeamMall";        }else if(goodsOrder.startsWith(ReBaseGoods.LockMall)){        	claze = "ReGoodsOfLockMall";        }                Integer snapshotId = good.getSnapshotGoods().getId();        Integer baseId = good.getBaseGoodsId();	        if(claze.equals("ReGoodsOfTeamMall")){  //有个bug  调用下面的更新方法 更新不了 所以单写一个 				//望后来人 告诉我这个bug到底是怎么回事  下面的更新我单独拿去测试是可以更新的 				ReGoodsOfTeamMall teamMall = reGoodsOfTeamMallDao.findById(Integer.parseInt(mallGoodsId));				teamMall.setSalesVolume(teamMall.getSalesVolume()+amount);				reGoodsOfTeamMallDao.update(teamMall);	        }else{	        	//更新商城销量	        	int vol1 = updateGoodsSalesVolume(claze,Integer.parseInt(mallGoodsId),amount);	        }		        //更新快照销量		        int vol2 = updateGoodsSalesVolume("ReGoodsSnapshot",snapshotId,amount);		        //更新基础商品销量		        int vol3 = updateGoodsSalesVolume("ReGoodsOfBase",baseId,amount);    }        private Integer updateGoodsSalesVolume(String claze, Integer id, Integer amount){		String queryString = "update " + claze				+ " set salesVolume = salesVolume + :amount where id = :goodId";		Session session = sessionFactory.getCurrentSession();		Query query = session.createQuery(queryString);		query.setParameter("amount", amount);		query.setParameter("goodId", id);		return query.executeUpdate();    }    @Override    public Integer updateRepertory(String standardRepertory,Integer noStandardRepertory, String goodsOrder){    	//拼接查询条件；        String queryString = "update ";        if (goodsOrder.startsWith(ReBaseGoods.SellerMall)) {            queryString += "ReGoodsOfSellerMall";        } else if (goodsOrder.startsWith(ReBaseGoods.ScoreMall)) {            queryString += "ReGoodsOfScoreMall";        } else if (goodsOrder.startsWith(ReBaseGoods.SeckillMall)) {            queryString += "ReGoodsOfSeckillMall";        } else if (goodsOrder.startsWith(ReBaseGoods.LocalSpecialtyMall)) {            queryString += "ReGoodsOfLocalSpecialtyMall";        } else if (goodsOrder.startsWith(ReBaseGoods.NineNineMall)) {            queryString += "ReGoodsOfNineNineMall";        } else if (goodsOrder.startsWith(ReBaseGoods.MemberMall)) {            queryString += "ReGoodsOfMemberMall";        }else if (goodsOrder.startsWith(ReBaseGoods.ChangeMall)) {            queryString += "ReGoodsOfChangeMall";        }else if(goodsOrder.startsWith(ReBaseGoods.LockMall)){        	queryString += "ReGoodsOfLockMall";        }        if(StringUtils.isNotEmpty(standardRepertory)){        	queryString += " set standardDetails = '"+standardRepertory+"'";        }else{        	queryString += " set noStandardRepertory = "+noStandardRepertory;        }        queryString += " where id=" + goodsOrder.substring(3) + " and isValid=1";                Session session = sessionFactory.getCurrentSession();        Query query = session.createQuery(queryString);        return query.executeUpdate();    }    }